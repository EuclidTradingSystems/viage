/**
 *
 *  Account.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace viage
{

class Account
{
  public:
    struct Cols
    {
        static const std::string _Id;
        static const std::string _Acronym;
        static const std::string _CreationDate;
        static const std::string _UpdateDate;
        static const std::string _State;
        static const std::string _M2Available;
        static const std::string _M2Constructed;
        static const std::string _M3s;
        static const std::string _RawSurface;
        static const std::string _Rooms;
        static const std::string _Surface;
        static const std::string _HabitatType;
        static const std::string _Zone;
        static const std::string _Street;
        static const std::string _City;
        static const std::string _Canton;
        static const std::string _Zip;
        static const std::string _Rating;
        static const std::string _HasParking;
        static const std::string _ParkingSpots;
        static const std::string _ParkingSurface;
        static const std::string _TerrainDescription;
        static const std::string _TerrainSurface;
        static const std::string _AdvisorId;
        static const std::string _Equipements;
        static const std::string _ParkingType;
        static const std::string _ReceivedDate;
        static const std::string _ExpertizedDate;
        static const std::string _NotarizedDate;
        static const std::string _PaidDate;
        static const std::string _DecidedDate;
        static const std::string _TransmitedDate;
        static const std::string _IsPPE;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = void;
    int getPrimaryKey() const { assert(false); return 0; }

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Account(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Account(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Account(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Account() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column Id  */
    ///Get the value of the column Id, returns the default value if the column is null
    const int8_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getId() const noexcept;
    ///Set the value of the column Id
    void setId(const int8_t &pId) noexcept;
    void setIdToNull() noexcept;

    /**  For column Acronym  */
    ///Get the value of the column Acronym, returns the default value if the column is null
    const std::string &getValueOfAcronym() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAcronym() const noexcept;
    ///Set the value of the column Acronym
    void setAcronym(const std::string &pAcronym) noexcept;
    void setAcronym(std::string &&pAcronym) noexcept;
    void setAcronymToNull() noexcept;

    /**  For column CreationDate  */
    ///Get the value of the column CreationDate, returns the default value if the column is null
    const std::string &getValueOfCreationdate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCreationdate() const noexcept;
    ///Set the value of the column CreationDate
    void setCreationdate(const std::string &pCreationdate) noexcept;
    void setCreationdate(std::string &&pCreationdate) noexcept;
    void setCreationdateToNull() noexcept;

    /**  For column UpdateDate  */
    ///Get the value of the column UpdateDate, returns the default value if the column is null
    const std::string &getValueOfUpdatedate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUpdatedate() const noexcept;
    ///Set the value of the column UpdateDate
    void setUpdatedate(const std::string &pUpdatedate) noexcept;
    void setUpdatedate(std::string &&pUpdatedate) noexcept;
    void setUpdatedateToNull() noexcept;

    /**  For column State  */
    ///Get the value of the column State, returns the default value if the column is null
    const int8_t &getValueOfState() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getState() const noexcept;
    ///Set the value of the column State
    void setState(const int8_t &pState) noexcept;
    void setStateToNull() noexcept;

    /**  For column M2Available  */
    ///Get the value of the column M2Available, returns the default value if the column is null
    const std::string &getValueOfM2available() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getM2available() const noexcept;
    ///Set the value of the column M2Available
    void setM2available(const std::string &pM2available) noexcept;
    void setM2available(std::string &&pM2available) noexcept;
    void setM2availableToNull() noexcept;

    /**  For column M2Constructed  */
    ///Get the value of the column M2Constructed, returns the default value if the column is null
    const std::string &getValueOfM2constructed() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getM2constructed() const noexcept;
    ///Set the value of the column M2Constructed
    void setM2constructed(const std::string &pM2constructed) noexcept;
    void setM2constructed(std::string &&pM2constructed) noexcept;
    void setM2constructedToNull() noexcept;

    /**  For column M3s  */
    ///Get the value of the column M3s, returns the default value if the column is null
    const int16_t &getValueOfM3s() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int16_t> &getM3s() const noexcept;
    ///Set the value of the column M3s
    void setM3s(const int16_t &pM3s) noexcept;
    void setM3sToNull() noexcept;

    /**  For column RawSurface  */
    ///Get the value of the column RawSurface, returns the default value if the column is null
    const std::string &getValueOfRawsurface() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRawsurface() const noexcept;
    ///Set the value of the column RawSurface
    void setRawsurface(const std::string &pRawsurface) noexcept;
    void setRawsurface(std::string &&pRawsurface) noexcept;
    void setRawsurfaceToNull() noexcept;

    /**  For column Rooms  */
    ///Get the value of the column Rooms, returns the default value if the column is null
    const std::string &getValueOfRooms() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRooms() const noexcept;
    ///Set the value of the column Rooms
    void setRooms(const std::string &pRooms) noexcept;
    void setRooms(std::string &&pRooms) noexcept;
    void setRoomsToNull() noexcept;

    /**  For column Surface  */
    ///Get the value of the column Surface, returns the default value if the column is null
    const std::string &getValueOfSurface() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSurface() const noexcept;
    ///Set the value of the column Surface
    void setSurface(const std::string &pSurface) noexcept;
    void setSurface(std::string &&pSurface) noexcept;
    void setSurfaceToNull() noexcept;

    /**  For column HabitatType  */
    ///Get the value of the column HabitatType, returns the default value if the column is null
    const int8_t &getValueOfHabitattype() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getHabitattype() const noexcept;
    ///Set the value of the column HabitatType
    void setHabitattype(const int8_t &pHabitattype) noexcept;
    void setHabitattypeToNull() noexcept;

    /**  For column Zone  */
    ///Get the value of the column Zone, returns the default value if the column is null
    const std::string &getValueOfZone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getZone() const noexcept;
    ///Set the value of the column Zone
    void setZone(const std::string &pZone) noexcept;
    void setZone(std::string &&pZone) noexcept;
    void setZoneToNull() noexcept;

    /**  For column Street  */
    ///Get the value of the column Street, returns the default value if the column is null
    const std::string &getValueOfStreet() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStreet() const noexcept;
    ///Set the value of the column Street
    void setStreet(const std::string &pStreet) noexcept;
    void setStreet(std::string &&pStreet) noexcept;
    void setStreetToNull() noexcept;

    /**  For column City  */
    ///Get the value of the column City, returns the default value if the column is null
    const std::string &getValueOfCity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCity() const noexcept;
    ///Set the value of the column City
    void setCity(const std::string &pCity) noexcept;
    void setCity(std::string &&pCity) noexcept;
    void setCityToNull() noexcept;

    /**  For column Canton  */
    ///Get the value of the column Canton, returns the default value if the column is null
    const std::string &getValueOfCanton() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCanton() const noexcept;
    ///Set the value of the column Canton
    void setCanton(const std::string &pCanton) noexcept;
    void setCanton(std::string &&pCanton) noexcept;
    void setCantonToNull() noexcept;

    /**  For column Zip  */
    ///Get the value of the column Zip, returns the default value if the column is null
    const std::string &getValueOfZip() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getZip() const noexcept;
    ///Set the value of the column Zip
    void setZip(const std::string &pZip) noexcept;
    void setZip(std::string &&pZip) noexcept;
    void setZipToNull() noexcept;

    /**  For column Rating  */
    ///Get the value of the column Rating, returns the default value if the column is null
    const int8_t &getValueOfRating() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getRating() const noexcept;
    ///Set the value of the column Rating
    void setRating(const int8_t &pRating) noexcept;
    void setRatingToNull() noexcept;

    /**  For column HasParking  */
    ///Get the value of the column HasParking, returns the default value if the column is null
    const int8_t &getValueOfHasparking() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getHasparking() const noexcept;
    ///Set the value of the column HasParking
    void setHasparking(const int8_t &pHasparking) noexcept;
    void setHasparkingToNull() noexcept;

    /**  For column ParkingSpots  */
    ///Get the value of the column ParkingSpots, returns the default value if the column is null
    const int8_t &getValueOfParkingspots() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getParkingspots() const noexcept;
    ///Set the value of the column ParkingSpots
    void setParkingspots(const int8_t &pParkingspots) noexcept;
    void setParkingspotsToNull() noexcept;

    /**  For column ParkingSurface  */
    ///Get the value of the column ParkingSurface, returns the default value if the column is null
    const int8_t &getValueOfParkingsurface() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getParkingsurface() const noexcept;
    ///Set the value of the column ParkingSurface
    void setParkingsurface(const int8_t &pParkingsurface) noexcept;
    void setParkingsurfaceToNull() noexcept;

    /**  For column TerrainDescription  */
    ///Get the value of the column TerrainDescription, returns the default value if the column is null
    const std::string &getValueOfTerraindescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTerraindescription() const noexcept;
    ///Set the value of the column TerrainDescription
    void setTerraindescription(const std::string &pTerraindescription) noexcept;
    void setTerraindescription(std::string &&pTerraindescription) noexcept;
    void setTerraindescriptionToNull() noexcept;

    /**  For column TerrainSurface  */
    ///Get the value of the column TerrainSurface, returns the default value if the column is null
    const int16_t &getValueOfTerrainsurface() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int16_t> &getTerrainsurface() const noexcept;
    ///Set the value of the column TerrainSurface
    void setTerrainsurface(const int16_t &pTerrainsurface) noexcept;
    void setTerrainsurfaceToNull() noexcept;

    /**  For column AdvisorId  */
    ///Get the value of the column AdvisorId, returns the default value if the column is null
    const int8_t &getValueOfAdvisorid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getAdvisorid() const noexcept;
    ///Set the value of the column AdvisorId
    void setAdvisorid(const int8_t &pAdvisorid) noexcept;
    void setAdvisoridToNull() noexcept;

    /**  For column Equipements  */
    ///Get the value of the column Equipements, returns the default value if the column is null
    const int8_t &getValueOfEquipements() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getEquipements() const noexcept;
    ///Set the value of the column Equipements
    void setEquipements(const int8_t &pEquipements) noexcept;
    void setEquipementsToNull() noexcept;

    /**  For column ParkingType  */
    ///Get the value of the column ParkingType, returns the default value if the column is null
    const int8_t &getValueOfParkingtype() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getParkingtype() const noexcept;
    ///Set the value of the column ParkingType
    void setParkingtype(const int8_t &pParkingtype) noexcept;
    void setParkingtypeToNull() noexcept;

    /**  For column ReceivedDate  */
    ///Get the value of the column ReceivedDate, returns the default value if the column is null
    const std::string &getValueOfReceiveddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getReceiveddate() const noexcept;
    ///Set the value of the column ReceivedDate
    void setReceiveddate(const std::string &pReceiveddate) noexcept;
    void setReceiveddate(std::string &&pReceiveddate) noexcept;
    void setReceiveddateToNull() noexcept;

    /**  For column ExpertizedDate  */
    ///Get the value of the column ExpertizedDate, returns the default value if the column is null
    const std::string &getValueOfExpertizeddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExpertizeddate() const noexcept;
    ///Set the value of the column ExpertizedDate
    void setExpertizeddate(const std::string &pExpertizeddate) noexcept;
    void setExpertizeddate(std::string &&pExpertizeddate) noexcept;
    void setExpertizeddateToNull() noexcept;

    /**  For column NotarizedDate  */
    ///Get the value of the column NotarizedDate, returns the default value if the column is null
    const std::string &getValueOfNotarizeddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNotarizeddate() const noexcept;
    ///Set the value of the column NotarizedDate
    void setNotarizeddate(const std::string &pNotarizeddate) noexcept;
    void setNotarizeddate(std::string &&pNotarizeddate) noexcept;
    void setNotarizeddateToNull() noexcept;

    /**  For column PaidDate  */
    ///Get the value of the column PaidDate, returns the default value if the column is null
    const std::string &getValueOfPaiddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPaiddate() const noexcept;
    ///Set the value of the column PaidDate
    void setPaiddate(const std::string &pPaiddate) noexcept;
    void setPaiddate(std::string &&pPaiddate) noexcept;
    void setPaiddateToNull() noexcept;

    /**  For column DecidedDate  */
    ///Get the value of the column DecidedDate, returns the default value if the column is null
    const std::string &getValueOfDecideddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDecideddate() const noexcept;
    ///Set the value of the column DecidedDate
    void setDecideddate(const std::string &pDecideddate) noexcept;
    void setDecideddate(std::string &&pDecideddate) noexcept;
    void setDecideddateToNull() noexcept;

    /**  For column TransmitedDate  */
    ///Get the value of the column TransmitedDate, returns the default value if the column is null
    const std::string &getValueOfTransmiteddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTransmiteddate() const noexcept;
    ///Set the value of the column TransmitedDate
    void setTransmiteddate(const std::string &pTransmiteddate) noexcept;
    void setTransmiteddate(std::string &&pTransmiteddate) noexcept;
    void setTransmiteddateToNull() noexcept;

    /**  For column IsPPE  */
    ///Get the value of the column IsPPE, returns the default value if the column is null
    const int8_t &getValueOfIsppe() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsppe() const noexcept;
    ///Set the value of the column IsPPE
    void setIsppe(const int8_t &pIsppe) noexcept;
    void setIsppeToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 33;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Account>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Account>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int8_t> id_;
    std::shared_ptr<std::string> acronym_;
    std::shared_ptr<std::string> creationdate_;
    std::shared_ptr<std::string> updatedate_;
    std::shared_ptr<int8_t> state_;
    std::shared_ptr<std::string> m2available_;
    std::shared_ptr<std::string> m2constructed_;
    std::shared_ptr<int16_t> m3s_;
    std::shared_ptr<std::string> rawsurface_;
    std::shared_ptr<std::string> rooms_;
    std::shared_ptr<std::string> surface_;
    std::shared_ptr<int8_t> habitattype_;
    std::shared_ptr<std::string> zone_;
    std::shared_ptr<std::string> street_;
    std::shared_ptr<std::string> city_;
    std::shared_ptr<std::string> canton_;
    std::shared_ptr<std::string> zip_;
    std::shared_ptr<int8_t> rating_;
    std::shared_ptr<int8_t> hasparking_;
    std::shared_ptr<int8_t> parkingspots_;
    std::shared_ptr<int8_t> parkingsurface_;
    std::shared_ptr<std::string> terraindescription_;
    std::shared_ptr<int16_t> terrainsurface_;
    std::shared_ptr<int8_t> advisorid_;
    std::shared_ptr<int8_t> equipements_;
    std::shared_ptr<int8_t> parkingtype_;
    std::shared_ptr<std::string> receiveddate_;
    std::shared_ptr<std::string> expertizeddate_;
    std::shared_ptr<std::string> notarizeddate_;
    std::shared_ptr<std::string> paiddate_;
    std::shared_ptr<std::string> decideddate_;
    std::shared_ptr<std::string> transmiteddate_;
    std::shared_ptr<int8_t> isppe_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[33]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "Id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "Acronym,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "CreationDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "UpdateDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "State,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "M2Available,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "M2Constructed,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "M3s,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "RawSurface,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "Rooms,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "Surface,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "HabitatType,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "Zone,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "Street,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "City,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "Canton,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "Zip,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "Rating,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "HasParking,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "ParkingSpots,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "ParkingSurface,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "TerrainDescription,";
            ++parametersCount;
        }
        if(dirtyFlag_[22])
        {
            sql += "TerrainSurface,";
            ++parametersCount;
        }
        if(dirtyFlag_[23])
        {
            sql += "AdvisorId,";
            ++parametersCount;
        }
        if(dirtyFlag_[24])
        {
            sql += "Equipements,";
            ++parametersCount;
        }
        if(dirtyFlag_[25])
        {
            sql += "ParkingType,";
            ++parametersCount;
        }
        if(dirtyFlag_[26])
        {
            sql += "ReceivedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[27])
        {
            sql += "ExpertizedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[28])
        {
            sql += "NotarizedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[29])
        {
            sql += "PaidDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[30])
        {
            sql += "DecidedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[31])
        {
            sql += "TransmitedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[32])
        {
            sql += "IsPPE,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[26])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[27])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[28])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[29])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[30])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[31])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[32])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace viage
} // namespace drogon_model
