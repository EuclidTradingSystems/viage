/**
 *
 *  Account.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Account.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string Account::Cols::_Id = "Id";
const std::string Account::Cols::_Acronym = "Acronym";
const std::string Account::Cols::_CreationDate = "CreationDate";
const std::string Account::Cols::_UpdateDate = "UpdateDate";
const std::string Account::Cols::_State = "State";
const std::string Account::Cols::_M2Available = "M2Available";
const std::string Account::Cols::_M2Constructed = "M2Constructed";
const std::string Account::Cols::_M3s = "M3s";
const std::string Account::Cols::_RawSurface = "RawSurface";
const std::string Account::Cols::_Rooms = "Rooms";
const std::string Account::Cols::_Surface = "Surface";
const std::string Account::Cols::_HabitatType = "HabitatType";
const std::string Account::Cols::_Zone = "Zone";
const std::string Account::Cols::_Street = "Street";
const std::string Account::Cols::_City = "City";
const std::string Account::Cols::_Canton = "Canton";
const std::string Account::Cols::_Zip = "Zip";
const std::string Account::Cols::_Rating = "Rating";
const std::string Account::Cols::_HasParking = "HasParking";
const std::string Account::Cols::_ParkingSpots = "ParkingSpots";
const std::string Account::Cols::_ParkingSurface = "ParkingSurface";
const std::string Account::Cols::_TerrainDescription = "TerrainDescription";
const std::string Account::Cols::_TerrainSurface = "TerrainSurface";
const std::string Account::Cols::_AdvisorId = "AdvisorId";
const std::string Account::Cols::_Equipements = "Equipements";
const std::string Account::Cols::_ParkingType = "ParkingType";
const std::string Account::Cols::_ReceivedDate = "ReceivedDate";
const std::string Account::Cols::_ExpertizedDate = "ExpertizedDate";
const std::string Account::Cols::_NotarizedDate = "NotarizedDate";
const std::string Account::Cols::_PaidDate = "PaidDate";
const std::string Account::Cols::_DecidedDate = "DecidedDate";
const std::string Account::Cols::_TransmitedDate = "TransmitedDate";
const std::string Account::Cols::_IsPPE = "IsPPE";
const std::string Account::primaryKeyName = "";
const bool Account::hasPrimaryKey = false;
const std::string Account::tableName = "account";

const std::vector<typename Account::MetaData> Account::metaData_={
{"Id","int8_t","tinyint(4)",1,0,0,0},
{"Acronym","std::string","varchar(8)",8,0,0,0},
{"CreationDate","std::string","varchar(19)",19,0,0,0},
{"UpdateDate","std::string","varchar(19)",19,0,0,0},
{"State","int8_t","tinyint(4)",1,0,0,0},
{"M2Available","std::string","varchar(3)",3,0,0,0},
{"M2Constructed","std::string","varchar(3)",3,0,0,0},
{"M3s","int16_t","smallint(6)",2,0,0,0},
{"RawSurface","std::string","varchar(3)",3,0,0,0},
{"Rooms","std::string","varchar(1)",1,0,0,0},
{"Surface","std::string","varchar(3)",3,0,0,0},
{"HabitatType","int8_t","tinyint(4)",1,0,0,0},
{"Zone","std::string","varchar(0)",0,0,0,0},
{"Street","std::string","varchar(29)",29,0,0,0},
{"City","std::string","varchar(12)",12,0,0,0},
{"Canton","std::string","varchar(6)",6,0,0,0},
{"Zip","std::string","varchar(4)",4,0,0,0},
{"Rating","int8_t","tinyint(4)",1,0,0,0},
{"HasParking","int8_t","tinyint(4)",1,0,0,0},
{"ParkingSpots","int8_t","tinyint(4)",1,0,0,0},
{"ParkingSurface","int8_t","tinyint(4)",1,0,0,0},
{"TerrainDescription","std::string","varchar(0)",0,0,0,0},
{"TerrainSurface","int16_t","smallint(6)",2,0,0,0},
{"AdvisorId","int8_t","tinyint(4)",1,0,0,0},
{"Equipements","int8_t","tinyint(4)",1,0,0,0},
{"ParkingType","int8_t","tinyint(4)",1,0,0,0},
{"ReceivedDate","std::string","varchar(19)",19,0,0,0},
{"ExpertizedDate","std::string","varchar(0)",0,0,0,0},
{"NotarizedDate","std::string","varchar(0)",0,0,0,0},
{"PaidDate","std::string","varchar(0)",0,0,0,0},
{"DecidedDate","std::string","varchar(0)",0,0,0,0},
{"TransmitedDate","std::string","varchar(0)",0,0,0,0},
{"IsPPE","int8_t","tinyint(4)",1,0,0,0}
};
const std::string &Account::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Account::Account(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int8_t>(r["Id"].as<int8_t>());
        }
        if(!r["Acronym"].isNull())
        {
            acronym_=std::make_shared<std::string>(r["Acronym"].as<std::string>());
        }
        if(!r["CreationDate"].isNull())
        {
            creationdate_=std::make_shared<std::string>(r["CreationDate"].as<std::string>());
        }
        if(!r["UpdateDate"].isNull())
        {
            updatedate_=std::make_shared<std::string>(r["UpdateDate"].as<std::string>());
        }
        if(!r["State"].isNull())
        {
            state_=std::make_shared<int8_t>(r["State"].as<int8_t>());
        }
        if(!r["M2Available"].isNull())
        {
            m2available_=std::make_shared<std::string>(r["M2Available"].as<std::string>());
        }
        if(!r["M2Constructed"].isNull())
        {
            m2constructed_=std::make_shared<std::string>(r["M2Constructed"].as<std::string>());
        }
        if(!r["M3s"].isNull())
        {
            m3s_=std::make_shared<int16_t>(r["M3s"].as<int16_t>());
        }
        if(!r["RawSurface"].isNull())
        {
            rawsurface_=std::make_shared<std::string>(r["RawSurface"].as<std::string>());
        }
        if(!r["Rooms"].isNull())
        {
            rooms_=std::make_shared<std::string>(r["Rooms"].as<std::string>());
        }
        if(!r["Surface"].isNull())
        {
            surface_=std::make_shared<std::string>(r["Surface"].as<std::string>());
        }
        if(!r["HabitatType"].isNull())
        {
            habitattype_=std::make_shared<int8_t>(r["HabitatType"].as<int8_t>());
        }
        if(!r["Zone"].isNull())
        {
            zone_=std::make_shared<std::string>(r["Zone"].as<std::string>());
        }
        if(!r["Street"].isNull())
        {
            street_=std::make_shared<std::string>(r["Street"].as<std::string>());
        }
        if(!r["City"].isNull())
        {
            city_=std::make_shared<std::string>(r["City"].as<std::string>());
        }
        if(!r["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(r["Canton"].as<std::string>());
        }
        if(!r["Zip"].isNull())
        {
            zip_=std::make_shared<std::string>(r["Zip"].as<std::string>());
        }
        if(!r["Rating"].isNull())
        {
            rating_=std::make_shared<int8_t>(r["Rating"].as<int8_t>());
        }
        if(!r["HasParking"].isNull())
        {
            hasparking_=std::make_shared<int8_t>(r["HasParking"].as<int8_t>());
        }
        if(!r["ParkingSpots"].isNull())
        {
            parkingspots_=std::make_shared<int8_t>(r["ParkingSpots"].as<int8_t>());
        }
        if(!r["ParkingSurface"].isNull())
        {
            parkingsurface_=std::make_shared<int8_t>(r["ParkingSurface"].as<int8_t>());
        }
        if(!r["TerrainDescription"].isNull())
        {
            terraindescription_=std::make_shared<std::string>(r["TerrainDescription"].as<std::string>());
        }
        if(!r["TerrainSurface"].isNull())
        {
            terrainsurface_=std::make_shared<int16_t>(r["TerrainSurface"].as<int16_t>());
        }
        if(!r["AdvisorId"].isNull())
        {
            advisorid_=std::make_shared<int8_t>(r["AdvisorId"].as<int8_t>());
        }
        if(!r["Equipements"].isNull())
        {
            equipements_=std::make_shared<int8_t>(r["Equipements"].as<int8_t>());
        }
        if(!r["ParkingType"].isNull())
        {
            parkingtype_=std::make_shared<int8_t>(r["ParkingType"].as<int8_t>());
        }
        if(!r["ReceivedDate"].isNull())
        {
            receiveddate_=std::make_shared<std::string>(r["ReceivedDate"].as<std::string>());
        }
        if(!r["ExpertizedDate"].isNull())
        {
            expertizeddate_=std::make_shared<std::string>(r["ExpertizedDate"].as<std::string>());
        }
        if(!r["NotarizedDate"].isNull())
        {
            notarizeddate_=std::make_shared<std::string>(r["NotarizedDate"].as<std::string>());
        }
        if(!r["PaidDate"].isNull())
        {
            paiddate_=std::make_shared<std::string>(r["PaidDate"].as<std::string>());
        }
        if(!r["DecidedDate"].isNull())
        {
            decideddate_=std::make_shared<std::string>(r["DecidedDate"].as<std::string>());
        }
        if(!r["TransmitedDate"].isNull())
        {
            transmiteddate_=std::make_shared<std::string>(r["TransmitedDate"].as<std::string>());
        }
        if(!r["IsPPE"].isNull())
        {
            isppe_=std::make_shared<int8_t>(r["IsPPE"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 33 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            acronym_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            creationdate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            updatedate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            state_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            m2available_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            m2constructed_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            m3s_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            rawsurface_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            rooms_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            surface_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            habitattype_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            zone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            street_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            canton_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            zip_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            rating_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            hasparking_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            parkingspots_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            parkingsurface_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            terraindescription_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            terrainsurface_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            advisorid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            equipements_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            parkingtype_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            receiveddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 27;
        if(!r[index].isNull())
        {
            expertizeddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 28;
        if(!r[index].isNull())
        {
            notarizeddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 29;
        if(!r[index].isNull())
        {
            paiddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 30;
        if(!r[index].isNull())
        {
            decideddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 31;
        if(!r[index].isNull())
        {
            transmiteddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 32;
        if(!r[index].isNull())
        {
            isppe_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Account::Account(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 33)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            acronym_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            updatedate_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            state_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            m2available_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            m2constructed_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            m3s_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            rawsurface_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            rooms_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            surface_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            habitattype_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            zone_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            street_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            canton_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            zip_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            rating_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            hasparking_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            parkingspots_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            parkingsurface_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            terraindescription_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            terrainsurface_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            advisorid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            equipements_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            parkingtype_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[25]].asInt64());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            receiveddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            expertizeddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[27]].asString());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            notarizeddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[28]].asString());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            paiddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            decideddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            transmiteddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            isppe_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[32]].asInt64());
        }
    }
}

Account::Account(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Acronym"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Acronym"].isNull())
        {
            acronym_=std::make_shared<std::string>(pJson["Acronym"].asString());
        }
    }
    if(pJson.isMember("CreationDate"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["CreationDate"].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson["CreationDate"].asString());
        }
    }
    if(pJson.isMember("UpdateDate"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["UpdateDate"].isNull())
        {
            updatedate_=std::make_shared<std::string>(pJson["UpdateDate"].asString());
        }
    }
    if(pJson.isMember("State"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["State"].isNull())
        {
            state_=std::make_shared<int8_t>((int8_t)pJson["State"].asInt64());
        }
    }
    if(pJson.isMember("M2Available"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["M2Available"].isNull())
        {
            m2available_=std::make_shared<std::string>(pJson["M2Available"].asString());
        }
    }
    if(pJson.isMember("M2Constructed"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["M2Constructed"].isNull())
        {
            m2constructed_=std::make_shared<std::string>(pJson["M2Constructed"].asString());
        }
    }
    if(pJson.isMember("M3s"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["M3s"].isNull())
        {
            m3s_=std::make_shared<int16_t>((int16_t)pJson["M3s"].asInt64());
        }
    }
    if(pJson.isMember("RawSurface"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["RawSurface"].isNull())
        {
            rawsurface_=std::make_shared<std::string>(pJson["RawSurface"].asString());
        }
    }
    if(pJson.isMember("Rooms"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["Rooms"].isNull())
        {
            rooms_=std::make_shared<std::string>(pJson["Rooms"].asString());
        }
    }
    if(pJson.isMember("Surface"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["Surface"].isNull())
        {
            surface_=std::make_shared<std::string>(pJson["Surface"].asString());
        }
    }
    if(pJson.isMember("HabitatType"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["HabitatType"].isNull())
        {
            habitattype_=std::make_shared<int8_t>((int8_t)pJson["HabitatType"].asInt64());
        }
    }
    if(pJson.isMember("Zone"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["Zone"].isNull())
        {
            zone_=std::make_shared<std::string>(pJson["Zone"].asString());
        }
    }
    if(pJson.isMember("Street"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["Street"].isNull())
        {
            street_=std::make_shared<std::string>(pJson["Street"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("Canton"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(pJson["Canton"].asString());
        }
    }
    if(pJson.isMember("Zip"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["Zip"].isNull())
        {
            zip_=std::make_shared<std::string>(pJson["Zip"].asString());
        }
    }
    if(pJson.isMember("Rating"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["Rating"].isNull())
        {
            rating_=std::make_shared<int8_t>((int8_t)pJson["Rating"].asInt64());
        }
    }
    if(pJson.isMember("HasParking"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["HasParking"].isNull())
        {
            hasparking_=std::make_shared<int8_t>((int8_t)pJson["HasParking"].asInt64());
        }
    }
    if(pJson.isMember("ParkingSpots"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["ParkingSpots"].isNull())
        {
            parkingspots_=std::make_shared<int8_t>((int8_t)pJson["ParkingSpots"].asInt64());
        }
    }
    if(pJson.isMember("ParkingSurface"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["ParkingSurface"].isNull())
        {
            parkingsurface_=std::make_shared<int8_t>((int8_t)pJson["ParkingSurface"].asInt64());
        }
    }
    if(pJson.isMember("TerrainDescription"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["TerrainDescription"].isNull())
        {
            terraindescription_=std::make_shared<std::string>(pJson["TerrainDescription"].asString());
        }
    }
    if(pJson.isMember("TerrainSurface"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["TerrainSurface"].isNull())
        {
            terrainsurface_=std::make_shared<int16_t>((int16_t)pJson["TerrainSurface"].asInt64());
        }
    }
    if(pJson.isMember("AdvisorId"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["AdvisorId"].isNull())
        {
            advisorid_=std::make_shared<int8_t>((int8_t)pJson["AdvisorId"].asInt64());
        }
    }
    if(pJson.isMember("Equipements"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["Equipements"].isNull())
        {
            equipements_=std::make_shared<int8_t>((int8_t)pJson["Equipements"].asInt64());
        }
    }
    if(pJson.isMember("ParkingType"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["ParkingType"].isNull())
        {
            parkingtype_=std::make_shared<int8_t>((int8_t)pJson["ParkingType"].asInt64());
        }
    }
    if(pJson.isMember("ReceivedDate"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["ReceivedDate"].isNull())
        {
            receiveddate_=std::make_shared<std::string>(pJson["ReceivedDate"].asString());
        }
    }
    if(pJson.isMember("ExpertizedDate"))
    {
        dirtyFlag_[27]=true;
        if(!pJson["ExpertizedDate"].isNull())
        {
            expertizeddate_=std::make_shared<std::string>(pJson["ExpertizedDate"].asString());
        }
    }
    if(pJson.isMember("NotarizedDate"))
    {
        dirtyFlag_[28]=true;
        if(!pJson["NotarizedDate"].isNull())
        {
            notarizeddate_=std::make_shared<std::string>(pJson["NotarizedDate"].asString());
        }
    }
    if(pJson.isMember("PaidDate"))
    {
        dirtyFlag_[29]=true;
        if(!pJson["PaidDate"].isNull())
        {
            paiddate_=std::make_shared<std::string>(pJson["PaidDate"].asString());
        }
    }
    if(pJson.isMember("DecidedDate"))
    {
        dirtyFlag_[30]=true;
        if(!pJson["DecidedDate"].isNull())
        {
            decideddate_=std::make_shared<std::string>(pJson["DecidedDate"].asString());
        }
    }
    if(pJson.isMember("TransmitedDate"))
    {
        dirtyFlag_[31]=true;
        if(!pJson["TransmitedDate"].isNull())
        {
            transmiteddate_=std::make_shared<std::string>(pJson["TransmitedDate"].asString());
        }
    }
    if(pJson.isMember("IsPPE"))
    {
        dirtyFlag_[32]=true;
        if(!pJson["IsPPE"].isNull())
        {
            isppe_=std::make_shared<int8_t>((int8_t)pJson["IsPPE"].asInt64());
        }
    }
}

void Account::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 33)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            acronym_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            updatedate_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            state_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            m2available_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            m2constructed_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            m3s_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            rawsurface_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            rooms_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            surface_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            habitattype_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            zone_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            street_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            canton_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            zip_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            rating_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            hasparking_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            parkingspots_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            parkingsurface_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[20]].asInt64());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            terraindescription_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            terrainsurface_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[22]].asInt64());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            advisorid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[23]].asInt64());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            equipements_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[24]].asInt64());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            parkingtype_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[25]].asInt64());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            receiveddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            expertizeddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[27]].asString());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            notarizeddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[28]].asString());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            paiddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            decideddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            transmiteddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            isppe_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[32]].asInt64());
        }
    }
}

void Account::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Acronym"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Acronym"].isNull())
        {
            acronym_=std::make_shared<std::string>(pJson["Acronym"].asString());
        }
    }
    if(pJson.isMember("CreationDate"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["CreationDate"].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson["CreationDate"].asString());
        }
    }
    if(pJson.isMember("UpdateDate"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["UpdateDate"].isNull())
        {
            updatedate_=std::make_shared<std::string>(pJson["UpdateDate"].asString());
        }
    }
    if(pJson.isMember("State"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["State"].isNull())
        {
            state_=std::make_shared<int8_t>((int8_t)pJson["State"].asInt64());
        }
    }
    if(pJson.isMember("M2Available"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["M2Available"].isNull())
        {
            m2available_=std::make_shared<std::string>(pJson["M2Available"].asString());
        }
    }
    if(pJson.isMember("M2Constructed"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["M2Constructed"].isNull())
        {
            m2constructed_=std::make_shared<std::string>(pJson["M2Constructed"].asString());
        }
    }
    if(pJson.isMember("M3s"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["M3s"].isNull())
        {
            m3s_=std::make_shared<int16_t>((int16_t)pJson["M3s"].asInt64());
        }
    }
    if(pJson.isMember("RawSurface"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["RawSurface"].isNull())
        {
            rawsurface_=std::make_shared<std::string>(pJson["RawSurface"].asString());
        }
    }
    if(pJson.isMember("Rooms"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["Rooms"].isNull())
        {
            rooms_=std::make_shared<std::string>(pJson["Rooms"].asString());
        }
    }
    if(pJson.isMember("Surface"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["Surface"].isNull())
        {
            surface_=std::make_shared<std::string>(pJson["Surface"].asString());
        }
    }
    if(pJson.isMember("HabitatType"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["HabitatType"].isNull())
        {
            habitattype_=std::make_shared<int8_t>((int8_t)pJson["HabitatType"].asInt64());
        }
    }
    if(pJson.isMember("Zone"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["Zone"].isNull())
        {
            zone_=std::make_shared<std::string>(pJson["Zone"].asString());
        }
    }
    if(pJson.isMember("Street"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["Street"].isNull())
        {
            street_=std::make_shared<std::string>(pJson["Street"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("Canton"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(pJson["Canton"].asString());
        }
    }
    if(pJson.isMember("Zip"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["Zip"].isNull())
        {
            zip_=std::make_shared<std::string>(pJson["Zip"].asString());
        }
    }
    if(pJson.isMember("Rating"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["Rating"].isNull())
        {
            rating_=std::make_shared<int8_t>((int8_t)pJson["Rating"].asInt64());
        }
    }
    if(pJson.isMember("HasParking"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["HasParking"].isNull())
        {
            hasparking_=std::make_shared<int8_t>((int8_t)pJson["HasParking"].asInt64());
        }
    }
    if(pJson.isMember("ParkingSpots"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["ParkingSpots"].isNull())
        {
            parkingspots_=std::make_shared<int8_t>((int8_t)pJson["ParkingSpots"].asInt64());
        }
    }
    if(pJson.isMember("ParkingSurface"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["ParkingSurface"].isNull())
        {
            parkingsurface_=std::make_shared<int8_t>((int8_t)pJson["ParkingSurface"].asInt64());
        }
    }
    if(pJson.isMember("TerrainDescription"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["TerrainDescription"].isNull())
        {
            terraindescription_=std::make_shared<std::string>(pJson["TerrainDescription"].asString());
        }
    }
    if(pJson.isMember("TerrainSurface"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["TerrainSurface"].isNull())
        {
            terrainsurface_=std::make_shared<int16_t>((int16_t)pJson["TerrainSurface"].asInt64());
        }
    }
    if(pJson.isMember("AdvisorId"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["AdvisorId"].isNull())
        {
            advisorid_=std::make_shared<int8_t>((int8_t)pJson["AdvisorId"].asInt64());
        }
    }
    if(pJson.isMember("Equipements"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["Equipements"].isNull())
        {
            equipements_=std::make_shared<int8_t>((int8_t)pJson["Equipements"].asInt64());
        }
    }
    if(pJson.isMember("ParkingType"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["ParkingType"].isNull())
        {
            parkingtype_=std::make_shared<int8_t>((int8_t)pJson["ParkingType"].asInt64());
        }
    }
    if(pJson.isMember("ReceivedDate"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["ReceivedDate"].isNull())
        {
            receiveddate_=std::make_shared<std::string>(pJson["ReceivedDate"].asString());
        }
    }
    if(pJson.isMember("ExpertizedDate"))
    {
        dirtyFlag_[27] = true;
        if(!pJson["ExpertizedDate"].isNull())
        {
            expertizeddate_=std::make_shared<std::string>(pJson["ExpertizedDate"].asString());
        }
    }
    if(pJson.isMember("NotarizedDate"))
    {
        dirtyFlag_[28] = true;
        if(!pJson["NotarizedDate"].isNull())
        {
            notarizeddate_=std::make_shared<std::string>(pJson["NotarizedDate"].asString());
        }
    }
    if(pJson.isMember("PaidDate"))
    {
        dirtyFlag_[29] = true;
        if(!pJson["PaidDate"].isNull())
        {
            paiddate_=std::make_shared<std::string>(pJson["PaidDate"].asString());
        }
    }
    if(pJson.isMember("DecidedDate"))
    {
        dirtyFlag_[30] = true;
        if(!pJson["DecidedDate"].isNull())
        {
            decideddate_=std::make_shared<std::string>(pJson["DecidedDate"].asString());
        }
    }
    if(pJson.isMember("TransmitedDate"))
    {
        dirtyFlag_[31] = true;
        if(!pJson["TransmitedDate"].isNull())
        {
            transmiteddate_=std::make_shared<std::string>(pJson["TransmitedDate"].asString());
        }
    }
    if(pJson.isMember("IsPPE"))
    {
        dirtyFlag_[32] = true;
        if(!pJson["IsPPE"].isNull())
        {
            isppe_=std::make_shared<int8_t>((int8_t)pJson["IsPPE"].asInt64());
        }
    }
}

const int8_t &Account::getValueOfId() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getId() const noexcept
{
    return id_;
}
void Account::setId(const int8_t &pId) noexcept
{
    id_ = std::make_shared<int8_t>(pId);
    dirtyFlag_[0] = true;
}
void Account::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Account::getValueOfAcronym() const noexcept
{
    const static std::string defaultValue = std::string();
    if(acronym_)
        return *acronym_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getAcronym() const noexcept
{
    return acronym_;
}
void Account::setAcronym(const std::string &pAcronym) noexcept
{
    acronym_ = std::make_shared<std::string>(pAcronym);
    dirtyFlag_[1] = true;
}
void Account::setAcronym(std::string &&pAcronym) noexcept
{
    acronym_ = std::make_shared<std::string>(std::move(pAcronym));
    dirtyFlag_[1] = true;
}
void Account::setAcronymToNull() noexcept
{
    acronym_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Account::getValueOfCreationdate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(creationdate_)
        return *creationdate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getCreationdate() const noexcept
{
    return creationdate_;
}
void Account::setCreationdate(const std::string &pCreationdate) noexcept
{
    creationdate_ = std::make_shared<std::string>(pCreationdate);
    dirtyFlag_[2] = true;
}
void Account::setCreationdate(std::string &&pCreationdate) noexcept
{
    creationdate_ = std::make_shared<std::string>(std::move(pCreationdate));
    dirtyFlag_[2] = true;
}
void Account::setCreationdateToNull() noexcept
{
    creationdate_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Account::getValueOfUpdatedate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(updatedate_)
        return *updatedate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getUpdatedate() const noexcept
{
    return updatedate_;
}
void Account::setUpdatedate(const std::string &pUpdatedate) noexcept
{
    updatedate_ = std::make_shared<std::string>(pUpdatedate);
    dirtyFlag_[3] = true;
}
void Account::setUpdatedate(std::string &&pUpdatedate) noexcept
{
    updatedate_ = std::make_shared<std::string>(std::move(pUpdatedate));
    dirtyFlag_[3] = true;
}
void Account::setUpdatedateToNull() noexcept
{
    updatedate_.reset();
    dirtyFlag_[3] = true;
}

const int8_t &Account::getValueOfState() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getState() const noexcept
{
    return state_;
}
void Account::setState(const int8_t &pState) noexcept
{
    state_ = std::make_shared<int8_t>(pState);
    dirtyFlag_[4] = true;
}
void Account::setStateToNull() noexcept
{
    state_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Account::getValueOfM2available() const noexcept
{
    const static std::string defaultValue = std::string();
    if(m2available_)
        return *m2available_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getM2available() const noexcept
{
    return m2available_;
}
void Account::setM2available(const std::string &pM2available) noexcept
{
    m2available_ = std::make_shared<std::string>(pM2available);
    dirtyFlag_[5] = true;
}
void Account::setM2available(std::string &&pM2available) noexcept
{
    m2available_ = std::make_shared<std::string>(std::move(pM2available));
    dirtyFlag_[5] = true;
}
void Account::setM2availableToNull() noexcept
{
    m2available_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Account::getValueOfM2constructed() const noexcept
{
    const static std::string defaultValue = std::string();
    if(m2constructed_)
        return *m2constructed_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getM2constructed() const noexcept
{
    return m2constructed_;
}
void Account::setM2constructed(const std::string &pM2constructed) noexcept
{
    m2constructed_ = std::make_shared<std::string>(pM2constructed);
    dirtyFlag_[6] = true;
}
void Account::setM2constructed(std::string &&pM2constructed) noexcept
{
    m2constructed_ = std::make_shared<std::string>(std::move(pM2constructed));
    dirtyFlag_[6] = true;
}
void Account::setM2constructedToNull() noexcept
{
    m2constructed_.reset();
    dirtyFlag_[6] = true;
}

const int16_t &Account::getValueOfM3s() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(m3s_)
        return *m3s_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Account::getM3s() const noexcept
{
    return m3s_;
}
void Account::setM3s(const int16_t &pM3s) noexcept
{
    m3s_ = std::make_shared<int16_t>(pM3s);
    dirtyFlag_[7] = true;
}
void Account::setM3sToNull() noexcept
{
    m3s_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Account::getValueOfRawsurface() const noexcept
{
    const static std::string defaultValue = std::string();
    if(rawsurface_)
        return *rawsurface_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getRawsurface() const noexcept
{
    return rawsurface_;
}
void Account::setRawsurface(const std::string &pRawsurface) noexcept
{
    rawsurface_ = std::make_shared<std::string>(pRawsurface);
    dirtyFlag_[8] = true;
}
void Account::setRawsurface(std::string &&pRawsurface) noexcept
{
    rawsurface_ = std::make_shared<std::string>(std::move(pRawsurface));
    dirtyFlag_[8] = true;
}
void Account::setRawsurfaceToNull() noexcept
{
    rawsurface_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Account::getValueOfRooms() const noexcept
{
    const static std::string defaultValue = std::string();
    if(rooms_)
        return *rooms_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getRooms() const noexcept
{
    return rooms_;
}
void Account::setRooms(const std::string &pRooms) noexcept
{
    rooms_ = std::make_shared<std::string>(pRooms);
    dirtyFlag_[9] = true;
}
void Account::setRooms(std::string &&pRooms) noexcept
{
    rooms_ = std::make_shared<std::string>(std::move(pRooms));
    dirtyFlag_[9] = true;
}
void Account::setRoomsToNull() noexcept
{
    rooms_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Account::getValueOfSurface() const noexcept
{
    const static std::string defaultValue = std::string();
    if(surface_)
        return *surface_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getSurface() const noexcept
{
    return surface_;
}
void Account::setSurface(const std::string &pSurface) noexcept
{
    surface_ = std::make_shared<std::string>(pSurface);
    dirtyFlag_[10] = true;
}
void Account::setSurface(std::string &&pSurface) noexcept
{
    surface_ = std::make_shared<std::string>(std::move(pSurface));
    dirtyFlag_[10] = true;
}
void Account::setSurfaceToNull() noexcept
{
    surface_.reset();
    dirtyFlag_[10] = true;
}

const int8_t &Account::getValueOfHabitattype() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(habitattype_)
        return *habitattype_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getHabitattype() const noexcept
{
    return habitattype_;
}
void Account::setHabitattype(const int8_t &pHabitattype) noexcept
{
    habitattype_ = std::make_shared<int8_t>(pHabitattype);
    dirtyFlag_[11] = true;
}
void Account::setHabitattypeToNull() noexcept
{
    habitattype_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Account::getValueOfZone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(zone_)
        return *zone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getZone() const noexcept
{
    return zone_;
}
void Account::setZone(const std::string &pZone) noexcept
{
    zone_ = std::make_shared<std::string>(pZone);
    dirtyFlag_[12] = true;
}
void Account::setZone(std::string &&pZone) noexcept
{
    zone_ = std::make_shared<std::string>(std::move(pZone));
    dirtyFlag_[12] = true;
}
void Account::setZoneToNull() noexcept
{
    zone_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Account::getValueOfStreet() const noexcept
{
    const static std::string defaultValue = std::string();
    if(street_)
        return *street_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getStreet() const noexcept
{
    return street_;
}
void Account::setStreet(const std::string &pStreet) noexcept
{
    street_ = std::make_shared<std::string>(pStreet);
    dirtyFlag_[13] = true;
}
void Account::setStreet(std::string &&pStreet) noexcept
{
    street_ = std::make_shared<std::string>(std::move(pStreet));
    dirtyFlag_[13] = true;
}
void Account::setStreetToNull() noexcept
{
    street_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Account::getValueOfCity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getCity() const noexcept
{
    return city_;
}
void Account::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[14] = true;
}
void Account::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[14] = true;
}
void Account::setCityToNull() noexcept
{
    city_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Account::getValueOfCanton() const noexcept
{
    const static std::string defaultValue = std::string();
    if(canton_)
        return *canton_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getCanton() const noexcept
{
    return canton_;
}
void Account::setCanton(const std::string &pCanton) noexcept
{
    canton_ = std::make_shared<std::string>(pCanton);
    dirtyFlag_[15] = true;
}
void Account::setCanton(std::string &&pCanton) noexcept
{
    canton_ = std::make_shared<std::string>(std::move(pCanton));
    dirtyFlag_[15] = true;
}
void Account::setCantonToNull() noexcept
{
    canton_.reset();
    dirtyFlag_[15] = true;
}

const std::string &Account::getValueOfZip() const noexcept
{
    const static std::string defaultValue = std::string();
    if(zip_)
        return *zip_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getZip() const noexcept
{
    return zip_;
}
void Account::setZip(const std::string &pZip) noexcept
{
    zip_ = std::make_shared<std::string>(pZip);
    dirtyFlag_[16] = true;
}
void Account::setZip(std::string &&pZip) noexcept
{
    zip_ = std::make_shared<std::string>(std::move(pZip));
    dirtyFlag_[16] = true;
}
void Account::setZipToNull() noexcept
{
    zip_.reset();
    dirtyFlag_[16] = true;
}

const int8_t &Account::getValueOfRating() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(rating_)
        return *rating_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getRating() const noexcept
{
    return rating_;
}
void Account::setRating(const int8_t &pRating) noexcept
{
    rating_ = std::make_shared<int8_t>(pRating);
    dirtyFlag_[17] = true;
}
void Account::setRatingToNull() noexcept
{
    rating_.reset();
    dirtyFlag_[17] = true;
}

const int8_t &Account::getValueOfHasparking() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(hasparking_)
        return *hasparking_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getHasparking() const noexcept
{
    return hasparking_;
}
void Account::setHasparking(const int8_t &pHasparking) noexcept
{
    hasparking_ = std::make_shared<int8_t>(pHasparking);
    dirtyFlag_[18] = true;
}
void Account::setHasparkingToNull() noexcept
{
    hasparking_.reset();
    dirtyFlag_[18] = true;
}

const int8_t &Account::getValueOfParkingspots() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(parkingspots_)
        return *parkingspots_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getParkingspots() const noexcept
{
    return parkingspots_;
}
void Account::setParkingspots(const int8_t &pParkingspots) noexcept
{
    parkingspots_ = std::make_shared<int8_t>(pParkingspots);
    dirtyFlag_[19] = true;
}
void Account::setParkingspotsToNull() noexcept
{
    parkingspots_.reset();
    dirtyFlag_[19] = true;
}

const int8_t &Account::getValueOfParkingsurface() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(parkingsurface_)
        return *parkingsurface_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getParkingsurface() const noexcept
{
    return parkingsurface_;
}
void Account::setParkingsurface(const int8_t &pParkingsurface) noexcept
{
    parkingsurface_ = std::make_shared<int8_t>(pParkingsurface);
    dirtyFlag_[20] = true;
}
void Account::setParkingsurfaceToNull() noexcept
{
    parkingsurface_.reset();
    dirtyFlag_[20] = true;
}

const std::string &Account::getValueOfTerraindescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(terraindescription_)
        return *terraindescription_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getTerraindescription() const noexcept
{
    return terraindescription_;
}
void Account::setTerraindescription(const std::string &pTerraindescription) noexcept
{
    terraindescription_ = std::make_shared<std::string>(pTerraindescription);
    dirtyFlag_[21] = true;
}
void Account::setTerraindescription(std::string &&pTerraindescription) noexcept
{
    terraindescription_ = std::make_shared<std::string>(std::move(pTerraindescription));
    dirtyFlag_[21] = true;
}
void Account::setTerraindescriptionToNull() noexcept
{
    terraindescription_.reset();
    dirtyFlag_[21] = true;
}

const int16_t &Account::getValueOfTerrainsurface() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(terrainsurface_)
        return *terrainsurface_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Account::getTerrainsurface() const noexcept
{
    return terrainsurface_;
}
void Account::setTerrainsurface(const int16_t &pTerrainsurface) noexcept
{
    terrainsurface_ = std::make_shared<int16_t>(pTerrainsurface);
    dirtyFlag_[22] = true;
}
void Account::setTerrainsurfaceToNull() noexcept
{
    terrainsurface_.reset();
    dirtyFlag_[22] = true;
}

const int8_t &Account::getValueOfAdvisorid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(advisorid_)
        return *advisorid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getAdvisorid() const noexcept
{
    return advisorid_;
}
void Account::setAdvisorid(const int8_t &pAdvisorid) noexcept
{
    advisorid_ = std::make_shared<int8_t>(pAdvisorid);
    dirtyFlag_[23] = true;
}
void Account::setAdvisoridToNull() noexcept
{
    advisorid_.reset();
    dirtyFlag_[23] = true;
}

const int8_t &Account::getValueOfEquipements() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(equipements_)
        return *equipements_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getEquipements() const noexcept
{
    return equipements_;
}
void Account::setEquipements(const int8_t &pEquipements) noexcept
{
    equipements_ = std::make_shared<int8_t>(pEquipements);
    dirtyFlag_[24] = true;
}
void Account::setEquipementsToNull() noexcept
{
    equipements_.reset();
    dirtyFlag_[24] = true;
}

const int8_t &Account::getValueOfParkingtype() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(parkingtype_)
        return *parkingtype_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getParkingtype() const noexcept
{
    return parkingtype_;
}
void Account::setParkingtype(const int8_t &pParkingtype) noexcept
{
    parkingtype_ = std::make_shared<int8_t>(pParkingtype);
    dirtyFlag_[25] = true;
}
void Account::setParkingtypeToNull() noexcept
{
    parkingtype_.reset();
    dirtyFlag_[25] = true;
}

const std::string &Account::getValueOfReceiveddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(receiveddate_)
        return *receiveddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getReceiveddate() const noexcept
{
    return receiveddate_;
}
void Account::setReceiveddate(const std::string &pReceiveddate) noexcept
{
    receiveddate_ = std::make_shared<std::string>(pReceiveddate);
    dirtyFlag_[26] = true;
}
void Account::setReceiveddate(std::string &&pReceiveddate) noexcept
{
    receiveddate_ = std::make_shared<std::string>(std::move(pReceiveddate));
    dirtyFlag_[26] = true;
}
void Account::setReceiveddateToNull() noexcept
{
    receiveddate_.reset();
    dirtyFlag_[26] = true;
}

const std::string &Account::getValueOfExpertizeddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expertizeddate_)
        return *expertizeddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getExpertizeddate() const noexcept
{
    return expertizeddate_;
}
void Account::setExpertizeddate(const std::string &pExpertizeddate) noexcept
{
    expertizeddate_ = std::make_shared<std::string>(pExpertizeddate);
    dirtyFlag_[27] = true;
}
void Account::setExpertizeddate(std::string &&pExpertizeddate) noexcept
{
    expertizeddate_ = std::make_shared<std::string>(std::move(pExpertizeddate));
    dirtyFlag_[27] = true;
}
void Account::setExpertizeddateToNull() noexcept
{
    expertizeddate_.reset();
    dirtyFlag_[27] = true;
}

const std::string &Account::getValueOfNotarizeddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(notarizeddate_)
        return *notarizeddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getNotarizeddate() const noexcept
{
    return notarizeddate_;
}
void Account::setNotarizeddate(const std::string &pNotarizeddate) noexcept
{
    notarizeddate_ = std::make_shared<std::string>(pNotarizeddate);
    dirtyFlag_[28] = true;
}
void Account::setNotarizeddate(std::string &&pNotarizeddate) noexcept
{
    notarizeddate_ = std::make_shared<std::string>(std::move(pNotarizeddate));
    dirtyFlag_[28] = true;
}
void Account::setNotarizeddateToNull() noexcept
{
    notarizeddate_.reset();
    dirtyFlag_[28] = true;
}

const std::string &Account::getValueOfPaiddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(paiddate_)
        return *paiddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getPaiddate() const noexcept
{
    return paiddate_;
}
void Account::setPaiddate(const std::string &pPaiddate) noexcept
{
    paiddate_ = std::make_shared<std::string>(pPaiddate);
    dirtyFlag_[29] = true;
}
void Account::setPaiddate(std::string &&pPaiddate) noexcept
{
    paiddate_ = std::make_shared<std::string>(std::move(pPaiddate));
    dirtyFlag_[29] = true;
}
void Account::setPaiddateToNull() noexcept
{
    paiddate_.reset();
    dirtyFlag_[29] = true;
}

const std::string &Account::getValueOfDecideddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(decideddate_)
        return *decideddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getDecideddate() const noexcept
{
    return decideddate_;
}
void Account::setDecideddate(const std::string &pDecideddate) noexcept
{
    decideddate_ = std::make_shared<std::string>(pDecideddate);
    dirtyFlag_[30] = true;
}
void Account::setDecideddate(std::string &&pDecideddate) noexcept
{
    decideddate_ = std::make_shared<std::string>(std::move(pDecideddate));
    dirtyFlag_[30] = true;
}
void Account::setDecideddateToNull() noexcept
{
    decideddate_.reset();
    dirtyFlag_[30] = true;
}

const std::string &Account::getValueOfTransmiteddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(transmiteddate_)
        return *transmiteddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Account::getTransmiteddate() const noexcept
{
    return transmiteddate_;
}
void Account::setTransmiteddate(const std::string &pTransmiteddate) noexcept
{
    transmiteddate_ = std::make_shared<std::string>(pTransmiteddate);
    dirtyFlag_[31] = true;
}
void Account::setTransmiteddate(std::string &&pTransmiteddate) noexcept
{
    transmiteddate_ = std::make_shared<std::string>(std::move(pTransmiteddate));
    dirtyFlag_[31] = true;
}
void Account::setTransmiteddateToNull() noexcept
{
    transmiteddate_.reset();
    dirtyFlag_[31] = true;
}

const int8_t &Account::getValueOfIsppe() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isppe_)
        return *isppe_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Account::getIsppe() const noexcept
{
    return isppe_;
}
void Account::setIsppe(const int8_t &pIsppe) noexcept
{
    isppe_ = std::make_shared<int8_t>(pIsppe);
    dirtyFlag_[32] = true;
}
void Account::setIsppeToNull() noexcept
{
    isppe_.reset();
    dirtyFlag_[32] = true;
}

void Account::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Account::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "Acronym",
        "CreationDate",
        "UpdateDate",
        "State",
        "M2Available",
        "M2Constructed",
        "M3s",
        "RawSurface",
        "Rooms",
        "Surface",
        "HabitatType",
        "Zone",
        "Street",
        "City",
        "Canton",
        "Zip",
        "Rating",
        "HasParking",
        "ParkingSpots",
        "ParkingSurface",
        "TerrainDescription",
        "TerrainSurface",
        "AdvisorId",
        "Equipements",
        "ParkingType",
        "ReceivedDate",
        "ExpertizedDate",
        "NotarizedDate",
        "PaidDate",
        "DecidedDate",
        "TransmitedDate",
        "IsPPE"
    };
    return inCols;
}

void Account::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getAcronym())
        {
            binder << getValueOfAcronym();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreationdate())
        {
            binder << getValueOfCreationdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUpdatedate())
        {
            binder << getValueOfUpdatedate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getM2available())
        {
            binder << getValueOfM2available();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getM2constructed())
        {
            binder << getValueOfM2constructed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getM3s())
        {
            binder << getValueOfM3s();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getRawsurface())
        {
            binder << getValueOfRawsurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRooms())
        {
            binder << getValueOfRooms();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSurface())
        {
            binder << getValueOfSurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getHabitattype())
        {
            binder << getValueOfHabitattype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getZone())
        {
            binder << getValueOfZone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getStreet())
        {
            binder << getValueOfStreet();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCanton())
        {
            binder << getValueOfCanton();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getZip())
        {
            binder << getValueOfZip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRating())
        {
            binder << getValueOfRating();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getHasparking())
        {
            binder << getValueOfHasparking();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getParkingspots())
        {
            binder << getValueOfParkingspots();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getParkingsurface())
        {
            binder << getValueOfParkingsurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTerraindescription())
        {
            binder << getValueOfTerraindescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getTerrainsurface())
        {
            binder << getValueOfTerrainsurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getAdvisorid())
        {
            binder << getValueOfAdvisorid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getEquipements())
        {
            binder << getValueOfEquipements();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getParkingtype())
        {
            binder << getValueOfParkingtype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getReceiveddate())
        {
            binder << getValueOfReceiveddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getExpertizeddate())
        {
            binder << getValueOfExpertizeddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getNotarizeddate())
        {
            binder << getValueOfNotarizeddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getPaiddate())
        {
            binder << getValueOfPaiddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getDecideddate())
        {
            binder << getValueOfDecideddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getTransmiteddate())
        {
            binder << getValueOfTransmiteddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getIsppe())
        {
            binder << getValueOfIsppe();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Account::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    if(dirtyFlag_[27])
    {
        ret.push_back(getColumnName(27));
    }
    if(dirtyFlag_[28])
    {
        ret.push_back(getColumnName(28));
    }
    if(dirtyFlag_[29])
    {
        ret.push_back(getColumnName(29));
    }
    if(dirtyFlag_[30])
    {
        ret.push_back(getColumnName(30));
    }
    if(dirtyFlag_[31])
    {
        ret.push_back(getColumnName(31));
    }
    if(dirtyFlag_[32])
    {
        ret.push_back(getColumnName(32));
    }
    return ret;
}

void Account::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getAcronym())
        {
            binder << getValueOfAcronym();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCreationdate())
        {
            binder << getValueOfCreationdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUpdatedate())
        {
            binder << getValueOfUpdatedate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getM2available())
        {
            binder << getValueOfM2available();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getM2constructed())
        {
            binder << getValueOfM2constructed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getM3s())
        {
            binder << getValueOfM3s();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getRawsurface())
        {
            binder << getValueOfRawsurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRooms())
        {
            binder << getValueOfRooms();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSurface())
        {
            binder << getValueOfSurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getHabitattype())
        {
            binder << getValueOfHabitattype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getZone())
        {
            binder << getValueOfZone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getStreet())
        {
            binder << getValueOfStreet();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCanton())
        {
            binder << getValueOfCanton();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getZip())
        {
            binder << getValueOfZip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRating())
        {
            binder << getValueOfRating();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getHasparking())
        {
            binder << getValueOfHasparking();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getParkingspots())
        {
            binder << getValueOfParkingspots();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getParkingsurface())
        {
            binder << getValueOfParkingsurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getTerraindescription())
        {
            binder << getValueOfTerraindescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getTerrainsurface())
        {
            binder << getValueOfTerrainsurface();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getAdvisorid())
        {
            binder << getValueOfAdvisorid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getEquipements())
        {
            binder << getValueOfEquipements();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getParkingtype())
        {
            binder << getValueOfParkingtype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getReceiveddate())
        {
            binder << getValueOfReceiveddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getExpertizeddate())
        {
            binder << getValueOfExpertizeddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getNotarizeddate())
        {
            binder << getValueOfNotarizeddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getPaiddate())
        {
            binder << getValueOfPaiddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getDecideddate())
        {
            binder << getValueOfDecideddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getTransmiteddate())
        {
            binder << getValueOfTransmiteddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getIsppe())
        {
            binder << getValueOfIsppe();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Account::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getAcronym())
    {
        ret["Acronym"]=getValueOfAcronym();
    }
    else
    {
        ret["Acronym"]=Json::Value();
    }
    if(getCreationdate())
    {
        ret["CreationDate"]=getValueOfCreationdate();
    }
    else
    {
        ret["CreationDate"]=Json::Value();
    }
    if(getUpdatedate())
    {
        ret["UpdateDate"]=getValueOfUpdatedate();
    }
    else
    {
        ret["UpdateDate"]=Json::Value();
    }
    if(getState())
    {
        ret["State"]=getValueOfState();
    }
    else
    {
        ret["State"]=Json::Value();
    }
    if(getM2available())
    {
        ret["M2Available"]=getValueOfM2available();
    }
    else
    {
        ret["M2Available"]=Json::Value();
    }
    if(getM2constructed())
    {
        ret["M2Constructed"]=getValueOfM2constructed();
    }
    else
    {
        ret["M2Constructed"]=Json::Value();
    }
    if(getM3s())
    {
        ret["M3s"]=getValueOfM3s();
    }
    else
    {
        ret["M3s"]=Json::Value();
    }
    if(getRawsurface())
    {
        ret["RawSurface"]=getValueOfRawsurface();
    }
    else
    {
        ret["RawSurface"]=Json::Value();
    }
    if(getRooms())
    {
        ret["Rooms"]=getValueOfRooms();
    }
    else
    {
        ret["Rooms"]=Json::Value();
    }
    if(getSurface())
    {
        ret["Surface"]=getValueOfSurface();
    }
    else
    {
        ret["Surface"]=Json::Value();
    }
    if(getHabitattype())
    {
        ret["HabitatType"]=getValueOfHabitattype();
    }
    else
    {
        ret["HabitatType"]=Json::Value();
    }
    if(getZone())
    {
        ret["Zone"]=getValueOfZone();
    }
    else
    {
        ret["Zone"]=Json::Value();
    }
    if(getStreet())
    {
        ret["Street"]=getValueOfStreet();
    }
    else
    {
        ret["Street"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getCanton())
    {
        ret["Canton"]=getValueOfCanton();
    }
    else
    {
        ret["Canton"]=Json::Value();
    }
    if(getZip())
    {
        ret["Zip"]=getValueOfZip();
    }
    else
    {
        ret["Zip"]=Json::Value();
    }
    if(getRating())
    {
        ret["Rating"]=getValueOfRating();
    }
    else
    {
        ret["Rating"]=Json::Value();
    }
    if(getHasparking())
    {
        ret["HasParking"]=getValueOfHasparking();
    }
    else
    {
        ret["HasParking"]=Json::Value();
    }
    if(getParkingspots())
    {
        ret["ParkingSpots"]=getValueOfParkingspots();
    }
    else
    {
        ret["ParkingSpots"]=Json::Value();
    }
    if(getParkingsurface())
    {
        ret["ParkingSurface"]=getValueOfParkingsurface();
    }
    else
    {
        ret["ParkingSurface"]=Json::Value();
    }
    if(getTerraindescription())
    {
        ret["TerrainDescription"]=getValueOfTerraindescription();
    }
    else
    {
        ret["TerrainDescription"]=Json::Value();
    }
    if(getTerrainsurface())
    {
        ret["TerrainSurface"]=getValueOfTerrainsurface();
    }
    else
    {
        ret["TerrainSurface"]=Json::Value();
    }
    if(getAdvisorid())
    {
        ret["AdvisorId"]=getValueOfAdvisorid();
    }
    else
    {
        ret["AdvisorId"]=Json::Value();
    }
    if(getEquipements())
    {
        ret["Equipements"]=getValueOfEquipements();
    }
    else
    {
        ret["Equipements"]=Json::Value();
    }
    if(getParkingtype())
    {
        ret["ParkingType"]=getValueOfParkingtype();
    }
    else
    {
        ret["ParkingType"]=Json::Value();
    }
    if(getReceiveddate())
    {
        ret["ReceivedDate"]=getValueOfReceiveddate();
    }
    else
    {
        ret["ReceivedDate"]=Json::Value();
    }
    if(getExpertizeddate())
    {
        ret["ExpertizedDate"]=getValueOfExpertizeddate();
    }
    else
    {
        ret["ExpertizedDate"]=Json::Value();
    }
    if(getNotarizeddate())
    {
        ret["NotarizedDate"]=getValueOfNotarizeddate();
    }
    else
    {
        ret["NotarizedDate"]=Json::Value();
    }
    if(getPaiddate())
    {
        ret["PaidDate"]=getValueOfPaiddate();
    }
    else
    {
        ret["PaidDate"]=Json::Value();
    }
    if(getDecideddate())
    {
        ret["DecidedDate"]=getValueOfDecideddate();
    }
    else
    {
        ret["DecidedDate"]=Json::Value();
    }
    if(getTransmiteddate())
    {
        ret["TransmitedDate"]=getValueOfTransmiteddate();
    }
    else
    {
        ret["TransmitedDate"]=Json::Value();
    }
    if(getIsppe())
    {
        ret["IsPPE"]=getValueOfIsppe();
    }
    else
    {
        ret["IsPPE"]=Json::Value();
    }
    return ret;
}

Json::Value Account::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 33)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getAcronym())
            {
                ret[pMasqueradingVector[1]]=getValueOfAcronym();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCreationdate())
            {
                ret[pMasqueradingVector[2]]=getValueOfCreationdate();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUpdatedate())
            {
                ret[pMasqueradingVector[3]]=getValueOfUpdatedate();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[4]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getM2available())
            {
                ret[pMasqueradingVector[5]]=getValueOfM2available();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getM2constructed())
            {
                ret[pMasqueradingVector[6]]=getValueOfM2constructed();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getM3s())
            {
                ret[pMasqueradingVector[7]]=getValueOfM3s();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getRawsurface())
            {
                ret[pMasqueradingVector[8]]=getValueOfRawsurface();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRooms())
            {
                ret[pMasqueradingVector[9]]=getValueOfRooms();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSurface())
            {
                ret[pMasqueradingVector[10]]=getValueOfSurface();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getHabitattype())
            {
                ret[pMasqueradingVector[11]]=getValueOfHabitattype();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getZone())
            {
                ret[pMasqueradingVector[12]]=getValueOfZone();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getStreet())
            {
                ret[pMasqueradingVector[13]]=getValueOfStreet();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[14]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCanton())
            {
                ret[pMasqueradingVector[15]]=getValueOfCanton();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getZip())
            {
                ret[pMasqueradingVector[16]]=getValueOfZip();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getRating())
            {
                ret[pMasqueradingVector[17]]=getValueOfRating();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getHasparking())
            {
                ret[pMasqueradingVector[18]]=getValueOfHasparking();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getParkingspots())
            {
                ret[pMasqueradingVector[19]]=getValueOfParkingspots();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getParkingsurface())
            {
                ret[pMasqueradingVector[20]]=getValueOfParkingsurface();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getTerraindescription())
            {
                ret[pMasqueradingVector[21]]=getValueOfTerraindescription();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getTerrainsurface())
            {
                ret[pMasqueradingVector[22]]=getValueOfTerrainsurface();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getAdvisorid())
            {
                ret[pMasqueradingVector[23]]=getValueOfAdvisorid();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getEquipements())
            {
                ret[pMasqueradingVector[24]]=getValueOfEquipements();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getParkingtype())
            {
                ret[pMasqueradingVector[25]]=getValueOfParkingtype();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getReceiveddate())
            {
                ret[pMasqueradingVector[26]]=getValueOfReceiveddate();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[27].empty())
        {
            if(getExpertizeddate())
            {
                ret[pMasqueradingVector[27]]=getValueOfExpertizeddate();
            }
            else
            {
                ret[pMasqueradingVector[27]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[28].empty())
        {
            if(getNotarizeddate())
            {
                ret[pMasqueradingVector[28]]=getValueOfNotarizeddate();
            }
            else
            {
                ret[pMasqueradingVector[28]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[29].empty())
        {
            if(getPaiddate())
            {
                ret[pMasqueradingVector[29]]=getValueOfPaiddate();
            }
            else
            {
                ret[pMasqueradingVector[29]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[30].empty())
        {
            if(getDecideddate())
            {
                ret[pMasqueradingVector[30]]=getValueOfDecideddate();
            }
            else
            {
                ret[pMasqueradingVector[30]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[31].empty())
        {
            if(getTransmiteddate())
            {
                ret[pMasqueradingVector[31]]=getValueOfTransmiteddate();
            }
            else
            {
                ret[pMasqueradingVector[31]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[32].empty())
        {
            if(getIsppe())
            {
                ret[pMasqueradingVector[32]]=getValueOfIsppe();
            }
            else
            {
                ret[pMasqueradingVector[32]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getAcronym())
    {
        ret["Acronym"]=getValueOfAcronym();
    }
    else
    {
        ret["Acronym"]=Json::Value();
    }
    if(getCreationdate())
    {
        ret["CreationDate"]=getValueOfCreationdate();
    }
    else
    {
        ret["CreationDate"]=Json::Value();
    }
    if(getUpdatedate())
    {
        ret["UpdateDate"]=getValueOfUpdatedate();
    }
    else
    {
        ret["UpdateDate"]=Json::Value();
    }
    if(getState())
    {
        ret["State"]=getValueOfState();
    }
    else
    {
        ret["State"]=Json::Value();
    }
    if(getM2available())
    {
        ret["M2Available"]=getValueOfM2available();
    }
    else
    {
        ret["M2Available"]=Json::Value();
    }
    if(getM2constructed())
    {
        ret["M2Constructed"]=getValueOfM2constructed();
    }
    else
    {
        ret["M2Constructed"]=Json::Value();
    }
    if(getM3s())
    {
        ret["M3s"]=getValueOfM3s();
    }
    else
    {
        ret["M3s"]=Json::Value();
    }
    if(getRawsurface())
    {
        ret["RawSurface"]=getValueOfRawsurface();
    }
    else
    {
        ret["RawSurface"]=Json::Value();
    }
    if(getRooms())
    {
        ret["Rooms"]=getValueOfRooms();
    }
    else
    {
        ret["Rooms"]=Json::Value();
    }
    if(getSurface())
    {
        ret["Surface"]=getValueOfSurface();
    }
    else
    {
        ret["Surface"]=Json::Value();
    }
    if(getHabitattype())
    {
        ret["HabitatType"]=getValueOfHabitattype();
    }
    else
    {
        ret["HabitatType"]=Json::Value();
    }
    if(getZone())
    {
        ret["Zone"]=getValueOfZone();
    }
    else
    {
        ret["Zone"]=Json::Value();
    }
    if(getStreet())
    {
        ret["Street"]=getValueOfStreet();
    }
    else
    {
        ret["Street"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getCanton())
    {
        ret["Canton"]=getValueOfCanton();
    }
    else
    {
        ret["Canton"]=Json::Value();
    }
    if(getZip())
    {
        ret["Zip"]=getValueOfZip();
    }
    else
    {
        ret["Zip"]=Json::Value();
    }
    if(getRating())
    {
        ret["Rating"]=getValueOfRating();
    }
    else
    {
        ret["Rating"]=Json::Value();
    }
    if(getHasparking())
    {
        ret["HasParking"]=getValueOfHasparking();
    }
    else
    {
        ret["HasParking"]=Json::Value();
    }
    if(getParkingspots())
    {
        ret["ParkingSpots"]=getValueOfParkingspots();
    }
    else
    {
        ret["ParkingSpots"]=Json::Value();
    }
    if(getParkingsurface())
    {
        ret["ParkingSurface"]=getValueOfParkingsurface();
    }
    else
    {
        ret["ParkingSurface"]=Json::Value();
    }
    if(getTerraindescription())
    {
        ret["TerrainDescription"]=getValueOfTerraindescription();
    }
    else
    {
        ret["TerrainDescription"]=Json::Value();
    }
    if(getTerrainsurface())
    {
        ret["TerrainSurface"]=getValueOfTerrainsurface();
    }
    else
    {
        ret["TerrainSurface"]=Json::Value();
    }
    if(getAdvisorid())
    {
        ret["AdvisorId"]=getValueOfAdvisorid();
    }
    else
    {
        ret["AdvisorId"]=Json::Value();
    }
    if(getEquipements())
    {
        ret["Equipements"]=getValueOfEquipements();
    }
    else
    {
        ret["Equipements"]=Json::Value();
    }
    if(getParkingtype())
    {
        ret["ParkingType"]=getValueOfParkingtype();
    }
    else
    {
        ret["ParkingType"]=Json::Value();
    }
    if(getReceiveddate())
    {
        ret["ReceivedDate"]=getValueOfReceiveddate();
    }
    else
    {
        ret["ReceivedDate"]=Json::Value();
    }
    if(getExpertizeddate())
    {
        ret["ExpertizedDate"]=getValueOfExpertizeddate();
    }
    else
    {
        ret["ExpertizedDate"]=Json::Value();
    }
    if(getNotarizeddate())
    {
        ret["NotarizedDate"]=getValueOfNotarizeddate();
    }
    else
    {
        ret["NotarizedDate"]=Json::Value();
    }
    if(getPaiddate())
    {
        ret["PaidDate"]=getValueOfPaiddate();
    }
    else
    {
        ret["PaidDate"]=Json::Value();
    }
    if(getDecideddate())
    {
        ret["DecidedDate"]=getValueOfDecideddate();
    }
    else
    {
        ret["DecidedDate"]=Json::Value();
    }
    if(getTransmiteddate())
    {
        ret["TransmitedDate"]=getValueOfTransmiteddate();
    }
    else
    {
        ret["TransmitedDate"]=Json::Value();
    }
    if(getIsppe())
    {
        ret["IsPPE"]=getValueOfIsppe();
    }
    else
    {
        ret["IsPPE"]=Json::Value();
    }
    return ret;
}

bool Account::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("Acronym"))
    {
        if(!validJsonOfField(1, "Acronym", pJson["Acronym"], err, true))
            return false;
    }
    if(pJson.isMember("CreationDate"))
    {
        if(!validJsonOfField(2, "CreationDate", pJson["CreationDate"], err, true))
            return false;
    }
    if(pJson.isMember("UpdateDate"))
    {
        if(!validJsonOfField(3, "UpdateDate", pJson["UpdateDate"], err, true))
            return false;
    }
    if(pJson.isMember("State"))
    {
        if(!validJsonOfField(4, "State", pJson["State"], err, true))
            return false;
    }
    if(pJson.isMember("M2Available"))
    {
        if(!validJsonOfField(5, "M2Available", pJson["M2Available"], err, true))
            return false;
    }
    if(pJson.isMember("M2Constructed"))
    {
        if(!validJsonOfField(6, "M2Constructed", pJson["M2Constructed"], err, true))
            return false;
    }
    if(pJson.isMember("M3s"))
    {
        if(!validJsonOfField(7, "M3s", pJson["M3s"], err, true))
            return false;
    }
    if(pJson.isMember("RawSurface"))
    {
        if(!validJsonOfField(8, "RawSurface", pJson["RawSurface"], err, true))
            return false;
    }
    if(pJson.isMember("Rooms"))
    {
        if(!validJsonOfField(9, "Rooms", pJson["Rooms"], err, true))
            return false;
    }
    if(pJson.isMember("Surface"))
    {
        if(!validJsonOfField(10, "Surface", pJson["Surface"], err, true))
            return false;
    }
    if(pJson.isMember("HabitatType"))
    {
        if(!validJsonOfField(11, "HabitatType", pJson["HabitatType"], err, true))
            return false;
    }
    if(pJson.isMember("Zone"))
    {
        if(!validJsonOfField(12, "Zone", pJson["Zone"], err, true))
            return false;
    }
    if(pJson.isMember("Street"))
    {
        if(!validJsonOfField(13, "Street", pJson["Street"], err, true))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(14, "City", pJson["City"], err, true))
            return false;
    }
    if(pJson.isMember("Canton"))
    {
        if(!validJsonOfField(15, "Canton", pJson["Canton"], err, true))
            return false;
    }
    if(pJson.isMember("Zip"))
    {
        if(!validJsonOfField(16, "Zip", pJson["Zip"], err, true))
            return false;
    }
    if(pJson.isMember("Rating"))
    {
        if(!validJsonOfField(17, "Rating", pJson["Rating"], err, true))
            return false;
    }
    if(pJson.isMember("HasParking"))
    {
        if(!validJsonOfField(18, "HasParking", pJson["HasParking"], err, true))
            return false;
    }
    if(pJson.isMember("ParkingSpots"))
    {
        if(!validJsonOfField(19, "ParkingSpots", pJson["ParkingSpots"], err, true))
            return false;
    }
    if(pJson.isMember("ParkingSurface"))
    {
        if(!validJsonOfField(20, "ParkingSurface", pJson["ParkingSurface"], err, true))
            return false;
    }
    if(pJson.isMember("TerrainDescription"))
    {
        if(!validJsonOfField(21, "TerrainDescription", pJson["TerrainDescription"], err, true))
            return false;
    }
    if(pJson.isMember("TerrainSurface"))
    {
        if(!validJsonOfField(22, "TerrainSurface", pJson["TerrainSurface"], err, true))
            return false;
    }
    if(pJson.isMember("AdvisorId"))
    {
        if(!validJsonOfField(23, "AdvisorId", pJson["AdvisorId"], err, true))
            return false;
    }
    if(pJson.isMember("Equipements"))
    {
        if(!validJsonOfField(24, "Equipements", pJson["Equipements"], err, true))
            return false;
    }
    if(pJson.isMember("ParkingType"))
    {
        if(!validJsonOfField(25, "ParkingType", pJson["ParkingType"], err, true))
            return false;
    }
    if(pJson.isMember("ReceivedDate"))
    {
        if(!validJsonOfField(26, "ReceivedDate", pJson["ReceivedDate"], err, true))
            return false;
    }
    if(pJson.isMember("ExpertizedDate"))
    {
        if(!validJsonOfField(27, "ExpertizedDate", pJson["ExpertizedDate"], err, true))
            return false;
    }
    if(pJson.isMember("NotarizedDate"))
    {
        if(!validJsonOfField(28, "NotarizedDate", pJson["NotarizedDate"], err, true))
            return false;
    }
    if(pJson.isMember("PaidDate"))
    {
        if(!validJsonOfField(29, "PaidDate", pJson["PaidDate"], err, true))
            return false;
    }
    if(pJson.isMember("DecidedDate"))
    {
        if(!validJsonOfField(30, "DecidedDate", pJson["DecidedDate"], err, true))
            return false;
    }
    if(pJson.isMember("TransmitedDate"))
    {
        if(!validJsonOfField(31, "TransmitedDate", pJson["TransmitedDate"], err, true))
            return false;
    }
    if(pJson.isMember("IsPPE"))
    {
        if(!validJsonOfField(32, "IsPPE", pJson["IsPPE"], err, true))
            return false;
    }
    return true;
}
bool Account::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 33)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[23].empty())
      {
          if(pJson.isMember(pMasqueradingVector[23]))
          {
              if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[24].empty())
      {
          if(pJson.isMember(pMasqueradingVector[24]))
          {
              if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[25].empty())
      {
          if(pJson.isMember(pMasqueradingVector[25]))
          {
              if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[26].empty())
      {
          if(pJson.isMember(pMasqueradingVector[26]))
          {
              if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[27].empty())
      {
          if(pJson.isMember(pMasqueradingVector[27]))
          {
              if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[28].empty())
      {
          if(pJson.isMember(pMasqueradingVector[28]))
          {
              if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[29].empty())
      {
          if(pJson.isMember(pMasqueradingVector[29]))
          {
              if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[30].empty())
      {
          if(pJson.isMember(pMasqueradingVector[30]))
          {
              if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[31].empty())
      {
          if(pJson.isMember(pMasqueradingVector[31]))
          {
              if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[32].empty())
      {
          if(pJson.isMember(pMasqueradingVector[32]))
          {
              if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Account::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    if(pJson.isMember("Acronym"))
    {
        if(!validJsonOfField(1, "Acronym", pJson["Acronym"], err, false))
            return false;
    }
    if(pJson.isMember("CreationDate"))
    {
        if(!validJsonOfField(2, "CreationDate", pJson["CreationDate"], err, false))
            return false;
    }
    if(pJson.isMember("UpdateDate"))
    {
        if(!validJsonOfField(3, "UpdateDate", pJson["UpdateDate"], err, false))
            return false;
    }
    if(pJson.isMember("State"))
    {
        if(!validJsonOfField(4, "State", pJson["State"], err, false))
            return false;
    }
    if(pJson.isMember("M2Available"))
    {
        if(!validJsonOfField(5, "M2Available", pJson["M2Available"], err, false))
            return false;
    }
    if(pJson.isMember("M2Constructed"))
    {
        if(!validJsonOfField(6, "M2Constructed", pJson["M2Constructed"], err, false))
            return false;
    }
    if(pJson.isMember("M3s"))
    {
        if(!validJsonOfField(7, "M3s", pJson["M3s"], err, false))
            return false;
    }
    if(pJson.isMember("RawSurface"))
    {
        if(!validJsonOfField(8, "RawSurface", pJson["RawSurface"], err, false))
            return false;
    }
    if(pJson.isMember("Rooms"))
    {
        if(!validJsonOfField(9, "Rooms", pJson["Rooms"], err, false))
            return false;
    }
    if(pJson.isMember("Surface"))
    {
        if(!validJsonOfField(10, "Surface", pJson["Surface"], err, false))
            return false;
    }
    if(pJson.isMember("HabitatType"))
    {
        if(!validJsonOfField(11, "HabitatType", pJson["HabitatType"], err, false))
            return false;
    }
    if(pJson.isMember("Zone"))
    {
        if(!validJsonOfField(12, "Zone", pJson["Zone"], err, false))
            return false;
    }
    if(pJson.isMember("Street"))
    {
        if(!validJsonOfField(13, "Street", pJson["Street"], err, false))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(14, "City", pJson["City"], err, false))
            return false;
    }
    if(pJson.isMember("Canton"))
    {
        if(!validJsonOfField(15, "Canton", pJson["Canton"], err, false))
            return false;
    }
    if(pJson.isMember("Zip"))
    {
        if(!validJsonOfField(16, "Zip", pJson["Zip"], err, false))
            return false;
    }
    if(pJson.isMember("Rating"))
    {
        if(!validJsonOfField(17, "Rating", pJson["Rating"], err, false))
            return false;
    }
    if(pJson.isMember("HasParking"))
    {
        if(!validJsonOfField(18, "HasParking", pJson["HasParking"], err, false))
            return false;
    }
    if(pJson.isMember("ParkingSpots"))
    {
        if(!validJsonOfField(19, "ParkingSpots", pJson["ParkingSpots"], err, false))
            return false;
    }
    if(pJson.isMember("ParkingSurface"))
    {
        if(!validJsonOfField(20, "ParkingSurface", pJson["ParkingSurface"], err, false))
            return false;
    }
    if(pJson.isMember("TerrainDescription"))
    {
        if(!validJsonOfField(21, "TerrainDescription", pJson["TerrainDescription"], err, false))
            return false;
    }
    if(pJson.isMember("TerrainSurface"))
    {
        if(!validJsonOfField(22, "TerrainSurface", pJson["TerrainSurface"], err, false))
            return false;
    }
    if(pJson.isMember("AdvisorId"))
    {
        if(!validJsonOfField(23, "AdvisorId", pJson["AdvisorId"], err, false))
            return false;
    }
    if(pJson.isMember("Equipements"))
    {
        if(!validJsonOfField(24, "Equipements", pJson["Equipements"], err, false))
            return false;
    }
    if(pJson.isMember("ParkingType"))
    {
        if(!validJsonOfField(25, "ParkingType", pJson["ParkingType"], err, false))
            return false;
    }
    if(pJson.isMember("ReceivedDate"))
    {
        if(!validJsonOfField(26, "ReceivedDate", pJson["ReceivedDate"], err, false))
            return false;
    }
    if(pJson.isMember("ExpertizedDate"))
    {
        if(!validJsonOfField(27, "ExpertizedDate", pJson["ExpertizedDate"], err, false))
            return false;
    }
    if(pJson.isMember("NotarizedDate"))
    {
        if(!validJsonOfField(28, "NotarizedDate", pJson["NotarizedDate"], err, false))
            return false;
    }
    if(pJson.isMember("PaidDate"))
    {
        if(!validJsonOfField(29, "PaidDate", pJson["PaidDate"], err, false))
            return false;
    }
    if(pJson.isMember("DecidedDate"))
    {
        if(!validJsonOfField(30, "DecidedDate", pJson["DecidedDate"], err, false))
            return false;
    }
    if(pJson.isMember("TransmitedDate"))
    {
        if(!validJsonOfField(31, "TransmitedDate", pJson["TransmitedDate"], err, false))
            return false;
    }
    if(pJson.isMember("IsPPE"))
    {
        if(!validJsonOfField(32, "IsPPE", pJson["IsPPE"], err, false))
            return false;
    }
    return true;
}
bool Account::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 33)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
      if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
      {
          if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
              return false;
      }
      if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
      {
          if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
              return false;
      }
      if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
      {
          if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
              return false;
      }
      if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
      {
          if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
              return false;
      }
      if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
      {
          if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, false))
              return false;
      }
      if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
      {
          if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, false))
              return false;
      }
      if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
      {
          if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, false))
              return false;
      }
      if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
      {
          if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, false))
              return false;
      }
      if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
      {
          if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, false))
              return false;
      }
      if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
      {
          if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Account::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 8)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 8)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 29)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 29)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 12)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 12)";
                return false;
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 6)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 6)";
                return false;
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 26:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 27:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 28:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 29:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 30:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 31:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 32:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
