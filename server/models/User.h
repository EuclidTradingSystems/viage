/**
 *
 *  User.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace viage
{

class User
{
  public:
    struct Cols
    {
        static const std::string _Id;
        static const std::string _FirstName;
        static const std::string _LastName;
        static const std::string _Login;
        static const std::string _Password;
        static const std::string _IsSystemAdministrator;
        static const std::string _EMail;
        static const std::string _Phone;
        static const std::string _Clearance;
        static const std::string _Beneficiary;
        static const std::string _Bic;
        static const std::string _Iban;
        static const std::string _Street;
        static const std::string _City;
        static const std::string _Canton;
        static const std::string _Zip;
        static const std::string _CompanyId;
        static const std::string _TeamId;
        static const std::string _IsLocked;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int8_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit User(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit User(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    User() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column Id  */
    ///Get the value of the column Id, returns the default value if the column is null
    const int8_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getId() const noexcept;
    ///Set the value of the column Id
    void setId(const int8_t &pId) noexcept;

    /**  For column FirstName  */
    ///Get the value of the column FirstName, returns the default value if the column is null
    const std::string &getValueOfFirstname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirstname() const noexcept;
    ///Set the value of the column FirstName
    void setFirstname(const std::string &pFirstname) noexcept;
    void setFirstname(std::string &&pFirstname) noexcept;
    void setFirstnameToNull() noexcept;

    /**  For column LastName  */
    ///Get the value of the column LastName, returns the default value if the column is null
    const std::string &getValueOfLastname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLastname() const noexcept;
    ///Set the value of the column LastName
    void setLastname(const std::string &pLastname) noexcept;
    void setLastname(std::string &&pLastname) noexcept;
    void setLastnameToNull() noexcept;

    /**  For column Login  */
    ///Get the value of the column Login, returns the default value if the column is null
    const std::string &getValueOfLogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLogin() const noexcept;
    ///Set the value of the column Login
    void setLogin(const std::string &pLogin) noexcept;
    void setLogin(std::string &&pLogin) noexcept;
    void setLoginToNull() noexcept;

    /**  For column Password  */
    ///Get the value of the column Password, returns the default value if the column is null
    const std::string &getValueOfPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPassword() const noexcept;
    ///Set the value of the column Password
    void setPassword(const std::string &pPassword) noexcept;
    void setPassword(std::string &&pPassword) noexcept;
    void setPasswordToNull() noexcept;

    /**  For column IsSystemAdministrator  */
    ///Get the value of the column IsSystemAdministrator, returns the default value if the column is null
    const int8_t &getValueOfIssystemadministrator() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIssystemadministrator() const noexcept;
    ///Set the value of the column IsSystemAdministrator
    void setIssystemadministrator(const int8_t &pIssystemadministrator) noexcept;
    void setIssystemadministratorToNull() noexcept;

    /**  For column EMail  */
    ///Get the value of the column EMail, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column EMail
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;
    void setEmailToNull() noexcept;

    /**  For column Phone  */
    ///Get the value of the column Phone, returns the default value if the column is null
    const std::string &getValueOfPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhone() const noexcept;
    ///Set the value of the column Phone
    void setPhone(const std::string &pPhone) noexcept;
    void setPhone(std::string &&pPhone) noexcept;
    void setPhoneToNull() noexcept;

    /**  For column Clearance  */
    ///Get the value of the column Clearance, returns the default value if the column is null
    const int8_t &getValueOfClearance() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getClearance() const noexcept;
    ///Set the value of the column Clearance
    void setClearance(const int8_t &pClearance) noexcept;
    void setClearanceToNull() noexcept;

    /**  For column Beneficiary  */
    ///Get the value of the column Beneficiary, returns the default value if the column is null
    const std::string &getValueOfBeneficiary() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBeneficiary() const noexcept;
    ///Set the value of the column Beneficiary
    void setBeneficiary(const std::string &pBeneficiary) noexcept;
    void setBeneficiary(std::string &&pBeneficiary) noexcept;
    void setBeneficiaryToNull() noexcept;

    /**  For column Bic  */
    ///Get the value of the column Bic, returns the default value if the column is null
    const std::string &getValueOfBic() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBic() const noexcept;
    ///Set the value of the column Bic
    void setBic(const std::string &pBic) noexcept;
    void setBic(std::string &&pBic) noexcept;
    void setBicToNull() noexcept;

    /**  For column Iban  */
    ///Get the value of the column Iban, returns the default value if the column is null
    const std::string &getValueOfIban() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIban() const noexcept;
    ///Set the value of the column Iban
    void setIban(const std::string &pIban) noexcept;
    void setIban(std::string &&pIban) noexcept;
    void setIbanToNull() noexcept;

    /**  For column Street  */
    ///Get the value of the column Street, returns the default value if the column is null
    const std::string &getValueOfStreet() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStreet() const noexcept;
    ///Set the value of the column Street
    void setStreet(const std::string &pStreet) noexcept;
    void setStreet(std::string &&pStreet) noexcept;
    void setStreetToNull() noexcept;

    /**  For column City  */
    ///Get the value of the column City, returns the default value if the column is null
    const std::string &getValueOfCity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCity() const noexcept;
    ///Set the value of the column City
    void setCity(const std::string &pCity) noexcept;
    void setCity(std::string &&pCity) noexcept;
    void setCityToNull() noexcept;

    /**  For column Canton  */
    ///Get the value of the column Canton, returns the default value if the column is null
    const std::string &getValueOfCanton() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCanton() const noexcept;
    ///Set the value of the column Canton
    void setCanton(const std::string &pCanton) noexcept;
    void setCanton(std::string &&pCanton) noexcept;
    void setCantonToNull() noexcept;

    /**  For column Zip  */
    ///Get the value of the column Zip, returns the default value if the column is null
    const int32_t &getValueOfZip() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getZip() const noexcept;
    ///Set the value of the column Zip
    void setZip(const int32_t &pZip) noexcept;
    void setZipToNull() noexcept;

    /**  For column CompanyId  */
    ///Get the value of the column CompanyId, returns the default value if the column is null
    const int8_t &getValueOfCompanyid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getCompanyid() const noexcept;
    ///Set the value of the column CompanyId
    void setCompanyid(const int8_t &pCompanyid) noexcept;
    void setCompanyidToNull() noexcept;

    /**  For column TeamId  */
    ///Get the value of the column TeamId, returns the default value if the column is null
    const int8_t &getValueOfTeamid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getTeamid() const noexcept;
    ///Set the value of the column TeamId
    void setTeamid(const int8_t &pTeamid) noexcept;
    void setTeamidToNull() noexcept;

    /**  For column IsLocked  */
    ///Get the value of the column IsLocked, returns the default value if the column is null
    const int8_t &getValueOfIslocked() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIslocked() const noexcept;
    ///Set the value of the column IsLocked
    void setIslocked(const int8_t &pIslocked) noexcept;
    void setIslockedToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 19;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<User>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<User>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int8_t> id_;
    std::shared_ptr<std::string> firstname_;
    std::shared_ptr<std::string> lastname_;
    std::shared_ptr<std::string> login_;
    std::shared_ptr<std::string> password_;
    std::shared_ptr<int8_t> issystemadministrator_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> phone_;
    std::shared_ptr<int8_t> clearance_;
    std::shared_ptr<std::string> beneficiary_;
    std::shared_ptr<std::string> bic_;
    std::shared_ptr<std::string> iban_;
    std::shared_ptr<std::string> street_;
    std::shared_ptr<std::string> city_;
    std::shared_ptr<std::string> canton_;
    std::shared_ptr<int32_t> zip_;
    std::shared_ptr<int8_t> companyid_;
    std::shared_ptr<int8_t> teamid_;
    std::shared_ptr<int8_t> islocked_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[19]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where Id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where Id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "Id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "FirstName,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "LastName,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "Login,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "Password,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "IsSystemAdministrator,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "EMail,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "Phone,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "Clearance,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "Beneficiary,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "Bic,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "Iban,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "Street,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "City,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "Canton,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "Zip,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "CompanyId,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "TeamId,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "IsLocked,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace viage
} // namespace drogon_model
