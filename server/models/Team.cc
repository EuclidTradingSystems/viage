/**
 *
 *  Team.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Team.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string Team::Cols::_Id = "Id";
const std::string Team::Cols::_Caption = "Caption";
const std::string Team::Cols::_CompanyId = "CompanyId";
const std::string Team::primaryKeyName = "";
const bool Team::hasPrimaryKey = false;
const std::string Team::tableName = "team";

const std::vector<typename Team::MetaData> Team::metaData_={
{"Id","int8_t","tinyint(4)",1,0,0,0},
{"Caption","std::string","varchar(16)",16,0,0,0},
{"CompanyId","int8_t","tinyint(4)",1,0,0,0}
};
const std::string &Team::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Team::Team(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int8_t>(r["Id"].as<int8_t>());
        }
        if(!r["Caption"].isNull())
        {
            caption_=std::make_shared<std::string>(r["Caption"].as<std::string>());
        }
        if(!r["CompanyId"].isNull())
        {
            companyid_=std::make_shared<int8_t>(r["CompanyId"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            caption_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            companyid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Team::Team(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            caption_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

Team::Team(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Caption"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Caption"].isNull())
        {
            caption_=std::make_shared<std::string>(pJson["Caption"].asString());
        }
    }
    if(pJson.isMember("CompanyId"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["CompanyId"].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson["CompanyId"].asInt64());
        }
    }
}

void Team::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            caption_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

void Team::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Caption"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Caption"].isNull())
        {
            caption_=std::make_shared<std::string>(pJson["Caption"].asString());
        }
    }
    if(pJson.isMember("CompanyId"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["CompanyId"].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson["CompanyId"].asInt64());
        }
    }
}

const int8_t &Team::getValueOfId() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Team::getId() const noexcept
{
    return id_;
}
void Team::setId(const int8_t &pId) noexcept
{
    id_ = std::make_shared<int8_t>(pId);
    dirtyFlag_[0] = true;
}
void Team::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Team::getValueOfCaption() const noexcept
{
    const static std::string defaultValue = std::string();
    if(caption_)
        return *caption_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Team::getCaption() const noexcept
{
    return caption_;
}
void Team::setCaption(const std::string &pCaption) noexcept
{
    caption_ = std::make_shared<std::string>(pCaption);
    dirtyFlag_[1] = true;
}
void Team::setCaption(std::string &&pCaption) noexcept
{
    caption_ = std::make_shared<std::string>(std::move(pCaption));
    dirtyFlag_[1] = true;
}
void Team::setCaptionToNull() noexcept
{
    caption_.reset();
    dirtyFlag_[1] = true;
}

const int8_t &Team::getValueOfCompanyid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(companyid_)
        return *companyid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Team::getCompanyid() const noexcept
{
    return companyid_;
}
void Team::setCompanyid(const int8_t &pCompanyid) noexcept
{
    companyid_ = std::make_shared<int8_t>(pCompanyid);
    dirtyFlag_[2] = true;
}
void Team::setCompanyidToNull() noexcept
{
    companyid_.reset();
    dirtyFlag_[2] = true;
}

void Team::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Team::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "Caption",
        "CompanyId"
    };
    return inCols;
}

void Team::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCaption())
        {
            binder << getValueOfCaption();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCompanyid())
        {
            binder << getValueOfCompanyid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Team::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Team::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCaption())
        {
            binder << getValueOfCaption();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCompanyid())
        {
            binder << getValueOfCompanyid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Team::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getCaption())
    {
        ret["Caption"]=getValueOfCaption();
    }
    else
    {
        ret["Caption"]=Json::Value();
    }
    if(getCompanyid())
    {
        ret["CompanyId"]=getValueOfCompanyid();
    }
    else
    {
        ret["CompanyId"]=Json::Value();
    }
    return ret;
}

Json::Value Team::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCaption())
            {
                ret[pMasqueradingVector[1]]=getValueOfCaption();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCompanyid())
            {
                ret[pMasqueradingVector[2]]=getValueOfCompanyid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getCaption())
    {
        ret["Caption"]=getValueOfCaption();
    }
    else
    {
        ret["Caption"]=Json::Value();
    }
    if(getCompanyid())
    {
        ret["CompanyId"]=getValueOfCompanyid();
    }
    else
    {
        ret["CompanyId"]=Json::Value();
    }
    return ret;
}

bool Team::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("Caption"))
    {
        if(!validJsonOfField(1, "Caption", pJson["Caption"], err, true))
            return false;
    }
    if(pJson.isMember("CompanyId"))
    {
        if(!validJsonOfField(2, "CompanyId", pJson["CompanyId"], err, true))
            return false;
    }
    return true;
}
bool Team::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Team::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    if(pJson.isMember("Caption"))
    {
        if(!validJsonOfField(1, "Caption", pJson["Caption"], err, false))
            return false;
    }
    if(pJson.isMember("CompanyId"))
    {
        if(!validJsonOfField(2, "CompanyId", pJson["CompanyId"], err, false))
            return false;
    }
    return true;
}
bool Team::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Team::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 16)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 16)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
