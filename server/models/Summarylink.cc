/**
 *
 *  Summarylink.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Summarylink.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string Summarylink::Cols::_Id = "Id";
const std::string Summarylink::Cols::_CreationDate = "CreationDate";
const std::string Summarylink::Cols::_Email = "Email";
const std::string Summarylink::Cols::_DownloadDate = "DownloadDate";
const std::string Summarylink::Cols::_AccountId = "AccountId";
const std::string Summarylink::primaryKeyName = "";
const bool Summarylink::hasPrimaryKey = false;
const std::string Summarylink::tableName = "summarylink";

const std::vector<typename Summarylink::MetaData> Summarylink::metaData_={
{"Id","std::string","varchar(36)",36,0,0,0},
{"CreationDate","std::string","varchar(19)",19,0,0,0},
{"Email","std::string","varchar(37)",37,0,0,0},
{"DownloadDate","std::string","varchar(19)",19,0,0,0},
{"AccountId","int8_t","tinyint(4)",1,0,0,0}
};
const std::string &Summarylink::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Summarylink::Summarylink(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<std::string>(r["Id"].as<std::string>());
        }
        if(!r["CreationDate"].isNull())
        {
            creationdate_=std::make_shared<std::string>(r["CreationDate"].as<std::string>());
        }
        if(!r["Email"].isNull())
        {
            email_=std::make_shared<std::string>(r["Email"].as<std::string>());
        }
        if(!r["DownloadDate"].isNull())
        {
            downloaddate_=std::make_shared<std::string>(r["DownloadDate"].as<std::string>());
        }
        if(!r["AccountId"].isNull())
        {
            accountid_=std::make_shared<int8_t>(r["AccountId"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            creationdate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            downloaddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            accountid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Summarylink::Summarylink(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            downloaddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
}

Summarylink::Summarylink(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["Id"].asString());
        }
    }
    if(pJson.isMember("CreationDate"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["CreationDate"].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson["CreationDate"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("DownloadDate"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["DownloadDate"].isNull())
        {
            downloaddate_=std::make_shared<std::string>(pJson["DownloadDate"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson["AccountId"].asInt64());
        }
    }
}

void Summarylink::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            downloaddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
}

void Summarylink::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["Id"].asString());
        }
    }
    if(pJson.isMember("CreationDate"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["CreationDate"].isNull())
        {
            creationdate_=std::make_shared<std::string>(pJson["CreationDate"].asString());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("DownloadDate"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["DownloadDate"].isNull())
        {
            downloaddate_=std::make_shared<std::string>(pJson["DownloadDate"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson["AccountId"].asInt64());
        }
    }
}

const std::string &Summarylink::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Summarylink::getId() const noexcept
{
    return id_;
}
void Summarylink::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Summarylink::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
void Summarylink::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Summarylink::getValueOfCreationdate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(creationdate_)
        return *creationdate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Summarylink::getCreationdate() const noexcept
{
    return creationdate_;
}
void Summarylink::setCreationdate(const std::string &pCreationdate) noexcept
{
    creationdate_ = std::make_shared<std::string>(pCreationdate);
    dirtyFlag_[1] = true;
}
void Summarylink::setCreationdate(std::string &&pCreationdate) noexcept
{
    creationdate_ = std::make_shared<std::string>(std::move(pCreationdate));
    dirtyFlag_[1] = true;
}
void Summarylink::setCreationdateToNull() noexcept
{
    creationdate_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Summarylink::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Summarylink::getEmail() const noexcept
{
    return email_;
}
void Summarylink::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[2] = true;
}
void Summarylink::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[2] = true;
}
void Summarylink::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Summarylink::getValueOfDownloaddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(downloaddate_)
        return *downloaddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Summarylink::getDownloaddate() const noexcept
{
    return downloaddate_;
}
void Summarylink::setDownloaddate(const std::string &pDownloaddate) noexcept
{
    downloaddate_ = std::make_shared<std::string>(pDownloaddate);
    dirtyFlag_[3] = true;
}
void Summarylink::setDownloaddate(std::string &&pDownloaddate) noexcept
{
    downloaddate_ = std::make_shared<std::string>(std::move(pDownloaddate));
    dirtyFlag_[3] = true;
}
void Summarylink::setDownloaddateToNull() noexcept
{
    downloaddate_.reset();
    dirtyFlag_[3] = true;
}

const int8_t &Summarylink::getValueOfAccountid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(accountid_)
        return *accountid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Summarylink::getAccountid() const noexcept
{
    return accountid_;
}
void Summarylink::setAccountid(const int8_t &pAccountid) noexcept
{
    accountid_ = std::make_shared<int8_t>(pAccountid);
    dirtyFlag_[4] = true;
}
void Summarylink::setAccountidToNull() noexcept
{
    accountid_.reset();
    dirtyFlag_[4] = true;
}

void Summarylink::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Summarylink::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "CreationDate",
        "Email",
        "DownloadDate",
        "AccountId"
    };
    return inCols;
}

void Summarylink::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCreationdate())
        {
            binder << getValueOfCreationdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDownloaddate())
        {
            binder << getValueOfDownloaddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Summarylink::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Summarylink::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCreationdate())
        {
            binder << getValueOfCreationdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDownloaddate())
        {
            binder << getValueOfDownloaddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Summarylink::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getCreationdate())
    {
        ret["CreationDate"]=getValueOfCreationdate();
    }
    else
    {
        ret["CreationDate"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getDownloaddate())
    {
        ret["DownloadDate"]=getValueOfDownloaddate();
    }
    else
    {
        ret["DownloadDate"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    return ret;
}

Json::Value Summarylink::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreationdate())
            {
                ret[pMasqueradingVector[1]]=getValueOfCreationdate();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[2]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDownloaddate())
            {
                ret[pMasqueradingVector[3]]=getValueOfDownloaddate();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAccountid())
            {
                ret[pMasqueradingVector[4]]=getValueOfAccountid();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getCreationdate())
    {
        ret["CreationDate"]=getValueOfCreationdate();
    }
    else
    {
        ret["CreationDate"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getDownloaddate())
    {
        ret["DownloadDate"]=getValueOfDownloaddate();
    }
    else
    {
        ret["DownloadDate"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    return ret;
}

bool Summarylink::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("CreationDate"))
    {
        if(!validJsonOfField(1, "CreationDate", pJson["CreationDate"], err, true))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(2, "Email", pJson["Email"], err, true))
            return false;
    }
    if(pJson.isMember("DownloadDate"))
    {
        if(!validJsonOfField(3, "DownloadDate", pJson["DownloadDate"], err, true))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(4, "AccountId", pJson["AccountId"], err, true))
            return false;
    }
    return true;
}
bool Summarylink::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Summarylink::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    if(pJson.isMember("CreationDate"))
    {
        if(!validJsonOfField(1, "CreationDate", pJson["CreationDate"], err, false))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(2, "Email", pJson["Email"], err, false))
            return false;
    }
    if(pJson.isMember("DownloadDate"))
    {
        if(!validJsonOfField(3, "DownloadDate", pJson["DownloadDate"], err, false))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(4, "AccountId", pJson["AccountId"], err, false))
            return false;
    }
    return true;
}
bool Summarylink::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Summarylink::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 36)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 36)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 37)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 37)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
