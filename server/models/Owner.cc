/**
 *
 *  Owner.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Owner.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string Owner::Cols::_Id = "Id";
const std::string Owner::Cols::_FirstName = "FirstName";
const std::string Owner::Cols::_LastName = "LastName";
const std::string Owner::Cols::_Sex = "Sex";
const std::string Owner::Cols::_Phone = "Phone";
const std::string Owner::Cols::_EMail = "EMail";
const std::string Owner::Cols::_AVS = "AVS";
const std::string Owner::Cols::_BirthDay = "BirthDay";
const std::string Owner::Cols::_CivilStatus = "CivilStatus";
const std::string Owner::Cols::_Street = "Street";
const std::string Owner::Cols::_City = "City";
const std::string Owner::Cols::_Canton = "Canton";
const std::string Owner::Cols::_Zip = "Zip";
const std::string Owner::Cols::_AccountId = "AccountId";
const std::string Owner::primaryKeyName = "Id";
const bool Owner::hasPrimaryKey = true;
const std::string Owner::tableName = "owner";

const std::vector<typename Owner::MetaData> Owner::metaData_={
{"Id","int8_t","tinyint(4)",1,0,1,1},
{"FirstName","std::string","varchar(11)",11,0,0,0},
{"LastName","std::string","varchar(9)",9,0,0,0},
{"Sex","int8_t","tinyint(4)",1,0,0,0},
{"Phone","std::string","varchar(13)",13,0,0,0},
{"EMail","std::string","varchar(26)",26,0,0,0},
{"AVS","std::string","varchar(13)",13,0,0,0},
{"BirthDay","std::string","varchar(19)",19,0,0,0},
{"CivilStatus","std::string","varchar(1)",1,0,0,0},
{"Street","std::string","varchar(29)",29,0,0,0},
{"City","std::string","varchar(12)",12,0,0,0},
{"Canton","std::string","varchar(9)",9,0,0,0},
{"Zip","std::string","varchar(4)",4,0,0,0},
{"AccountId","std::string","varchar(2)",2,0,0,0}
};
const std::string &Owner::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Owner::Owner(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int8_t>(r["Id"].as<int8_t>());
        }
        if(!r["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(r["FirstName"].as<std::string>());
        }
        if(!r["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(r["LastName"].as<std::string>());
        }
        if(!r["Sex"].isNull())
        {
            sex_=std::make_shared<int8_t>(r["Sex"].as<int8_t>());
        }
        if(!r["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["Phone"].as<std::string>());
        }
        if(!r["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(r["EMail"].as<std::string>());
        }
        if(!r["AVS"].isNull())
        {
            avs_=std::make_shared<std::string>(r["AVS"].as<std::string>());
        }
        if(!r["BirthDay"].isNull())
        {
            birthday_=std::make_shared<std::string>(r["BirthDay"].as<std::string>());
        }
        if(!r["CivilStatus"].isNull())
        {
            civilstatus_=std::make_shared<std::string>(r["CivilStatus"].as<std::string>());
        }
        if(!r["Street"].isNull())
        {
            street_=std::make_shared<std::string>(r["Street"].as<std::string>());
        }
        if(!r["City"].isNull())
        {
            city_=std::make_shared<std::string>(r["City"].as<std::string>());
        }
        if(!r["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(r["Canton"].as<std::string>());
        }
        if(!r["Zip"].isNull())
        {
            zip_=std::make_shared<std::string>(r["Zip"].as<std::string>());
        }
        if(!r["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(r["AccountId"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 14 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            lastname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            sex_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            avs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            birthday_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            civilstatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            street_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            canton_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            zip_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            accountid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Owner::Owner(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            avs_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            birthday_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            civilstatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            street_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            canton_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            zip_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
}

Owner::Owner(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Sex"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Sex"].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson["Sex"].asInt64());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("EMail"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["EMail"].asString());
        }
    }
    if(pJson.isMember("AVS"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["AVS"].isNull())
        {
            avs_=std::make_shared<std::string>(pJson["AVS"].asString());
        }
    }
    if(pJson.isMember("BirthDay"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["BirthDay"].isNull())
        {
            birthday_=std::make_shared<std::string>(pJson["BirthDay"].asString());
        }
    }
    if(pJson.isMember("CivilStatus"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["CivilStatus"].isNull())
        {
            civilstatus_=std::make_shared<std::string>(pJson["CivilStatus"].asString());
        }
    }
    if(pJson.isMember("Street"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["Street"].isNull())
        {
            street_=std::make_shared<std::string>(pJson["Street"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("Canton"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(pJson["Canton"].asString());
        }
    }
    if(pJson.isMember("Zip"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["Zip"].isNull())
        {
            zip_=std::make_shared<std::string>(pJson["Zip"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["AccountId"].asString());
        }
    }
}

void Owner::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 14)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            avs_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            birthday_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            civilstatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            street_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            canton_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            zip_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
}

void Owner::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Sex"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Sex"].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson["Sex"].asInt64());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("EMail"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["EMail"].asString());
        }
    }
    if(pJson.isMember("AVS"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["AVS"].isNull())
        {
            avs_=std::make_shared<std::string>(pJson["AVS"].asString());
        }
    }
    if(pJson.isMember("BirthDay"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["BirthDay"].isNull())
        {
            birthday_=std::make_shared<std::string>(pJson["BirthDay"].asString());
        }
    }
    if(pJson.isMember("CivilStatus"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["CivilStatus"].isNull())
        {
            civilstatus_=std::make_shared<std::string>(pJson["CivilStatus"].asString());
        }
    }
    if(pJson.isMember("Street"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["Street"].isNull())
        {
            street_=std::make_shared<std::string>(pJson["Street"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("Canton"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(pJson["Canton"].asString());
        }
    }
    if(pJson.isMember("Zip"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["Zip"].isNull())
        {
            zip_=std::make_shared<std::string>(pJson["Zip"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["AccountId"].asString());
        }
    }
}

const int8_t &Owner::getValueOfId() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Owner::getId() const noexcept
{
    return id_;
}
void Owner::setId(const int8_t &pId) noexcept
{
    id_ = std::make_shared<int8_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Owner::PrimaryKeyType & Owner::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Owner::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstname_)
        return *firstname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getFirstname() const noexcept
{
    return firstname_;
}
void Owner::setFirstname(const std::string &pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(pFirstname);
    dirtyFlag_[1] = true;
}
void Owner::setFirstname(std::string &&pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(std::move(pFirstname));
    dirtyFlag_[1] = true;
}
void Owner::setFirstnameToNull() noexcept
{
    firstname_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Owner::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastname_)
        return *lastname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getLastname() const noexcept
{
    return lastname_;
}
void Owner::setLastname(const std::string &pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(pLastname);
    dirtyFlag_[2] = true;
}
void Owner::setLastname(std::string &&pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(std::move(pLastname));
    dirtyFlag_[2] = true;
}
void Owner::setLastnameToNull() noexcept
{
    lastname_.reset();
    dirtyFlag_[2] = true;
}

const int8_t &Owner::getValueOfSex() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(sex_)
        return *sex_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Owner::getSex() const noexcept
{
    return sex_;
}
void Owner::setSex(const int8_t &pSex) noexcept
{
    sex_ = std::make_shared<int8_t>(pSex);
    dirtyFlag_[3] = true;
}
void Owner::setSexToNull() noexcept
{
    sex_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Owner::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getPhone() const noexcept
{
    return phone_;
}
void Owner::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[4] = true;
}
void Owner::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[4] = true;
}
void Owner::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Owner::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getEmail() const noexcept
{
    return email_;
}
void Owner::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[5] = true;
}
void Owner::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[5] = true;
}
void Owner::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Owner::getValueOfAvs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(avs_)
        return *avs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getAvs() const noexcept
{
    return avs_;
}
void Owner::setAvs(const std::string &pAvs) noexcept
{
    avs_ = std::make_shared<std::string>(pAvs);
    dirtyFlag_[6] = true;
}
void Owner::setAvs(std::string &&pAvs) noexcept
{
    avs_ = std::make_shared<std::string>(std::move(pAvs));
    dirtyFlag_[6] = true;
}
void Owner::setAvsToNull() noexcept
{
    avs_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Owner::getValueOfBirthday() const noexcept
{
    const static std::string defaultValue = std::string();
    if(birthday_)
        return *birthday_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getBirthday() const noexcept
{
    return birthday_;
}
void Owner::setBirthday(const std::string &pBirthday) noexcept
{
    birthday_ = std::make_shared<std::string>(pBirthday);
    dirtyFlag_[7] = true;
}
void Owner::setBirthday(std::string &&pBirthday) noexcept
{
    birthday_ = std::make_shared<std::string>(std::move(pBirthday));
    dirtyFlag_[7] = true;
}
void Owner::setBirthdayToNull() noexcept
{
    birthday_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Owner::getValueOfCivilstatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(civilstatus_)
        return *civilstatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getCivilstatus() const noexcept
{
    return civilstatus_;
}
void Owner::setCivilstatus(const std::string &pCivilstatus) noexcept
{
    civilstatus_ = std::make_shared<std::string>(pCivilstatus);
    dirtyFlag_[8] = true;
}
void Owner::setCivilstatus(std::string &&pCivilstatus) noexcept
{
    civilstatus_ = std::make_shared<std::string>(std::move(pCivilstatus));
    dirtyFlag_[8] = true;
}
void Owner::setCivilstatusToNull() noexcept
{
    civilstatus_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Owner::getValueOfStreet() const noexcept
{
    const static std::string defaultValue = std::string();
    if(street_)
        return *street_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getStreet() const noexcept
{
    return street_;
}
void Owner::setStreet(const std::string &pStreet) noexcept
{
    street_ = std::make_shared<std::string>(pStreet);
    dirtyFlag_[9] = true;
}
void Owner::setStreet(std::string &&pStreet) noexcept
{
    street_ = std::make_shared<std::string>(std::move(pStreet));
    dirtyFlag_[9] = true;
}
void Owner::setStreetToNull() noexcept
{
    street_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Owner::getValueOfCity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getCity() const noexcept
{
    return city_;
}
void Owner::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[10] = true;
}
void Owner::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[10] = true;
}
void Owner::setCityToNull() noexcept
{
    city_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Owner::getValueOfCanton() const noexcept
{
    const static std::string defaultValue = std::string();
    if(canton_)
        return *canton_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getCanton() const noexcept
{
    return canton_;
}
void Owner::setCanton(const std::string &pCanton) noexcept
{
    canton_ = std::make_shared<std::string>(pCanton);
    dirtyFlag_[11] = true;
}
void Owner::setCanton(std::string &&pCanton) noexcept
{
    canton_ = std::make_shared<std::string>(std::move(pCanton));
    dirtyFlag_[11] = true;
}
void Owner::setCantonToNull() noexcept
{
    canton_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Owner::getValueOfZip() const noexcept
{
    const static std::string defaultValue = std::string();
    if(zip_)
        return *zip_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getZip() const noexcept
{
    return zip_;
}
void Owner::setZip(const std::string &pZip) noexcept
{
    zip_ = std::make_shared<std::string>(pZip);
    dirtyFlag_[12] = true;
}
void Owner::setZip(std::string &&pZip) noexcept
{
    zip_ = std::make_shared<std::string>(std::move(pZip));
    dirtyFlag_[12] = true;
}
void Owner::setZipToNull() noexcept
{
    zip_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Owner::getValueOfAccountid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(accountid_)
        return *accountid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Owner::getAccountid() const noexcept
{
    return accountid_;
}
void Owner::setAccountid(const std::string &pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(pAccountid);
    dirtyFlag_[13] = true;
}
void Owner::setAccountid(std::string &&pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(std::move(pAccountid));
    dirtyFlag_[13] = true;
}
void Owner::setAccountidToNull() noexcept
{
    accountid_.reset();
    dirtyFlag_[13] = true;
}

void Owner::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Owner::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "FirstName",
        "LastName",
        "Sex",
        "Phone",
        "EMail",
        "AVS",
        "BirthDay",
        "CivilStatus",
        "Street",
        "City",
        "Canton",
        "Zip",
        "AccountId"
    };
    return inCols;
}

void Owner::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAvs())
        {
            binder << getValueOfAvs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBirthday())
        {
            binder << getValueOfBirthday();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCivilstatus())
        {
            binder << getValueOfCivilstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStreet())
        {
            binder << getValueOfStreet();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCanton())
        {
            binder << getValueOfCanton();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getZip())
        {
            binder << getValueOfZip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Owner::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    return ret;
}

void Owner::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAvs())
        {
            binder << getValueOfAvs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getBirthday())
        {
            binder << getValueOfBirthday();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCivilstatus())
        {
            binder << getValueOfCivilstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getStreet())
        {
            binder << getValueOfStreet();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCanton())
        {
            binder << getValueOfCanton();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getZip())
        {
            binder << getValueOfZip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Owner::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getSex())
    {
        ret["Sex"]=getValueOfSex();
    }
    else
    {
        ret["Sex"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getEmail())
    {
        ret["EMail"]=getValueOfEmail();
    }
    else
    {
        ret["EMail"]=Json::Value();
    }
    if(getAvs())
    {
        ret["AVS"]=getValueOfAvs();
    }
    else
    {
        ret["AVS"]=Json::Value();
    }
    if(getBirthday())
    {
        ret["BirthDay"]=getValueOfBirthday();
    }
    else
    {
        ret["BirthDay"]=Json::Value();
    }
    if(getCivilstatus())
    {
        ret["CivilStatus"]=getValueOfCivilstatus();
    }
    else
    {
        ret["CivilStatus"]=Json::Value();
    }
    if(getStreet())
    {
        ret["Street"]=getValueOfStreet();
    }
    else
    {
        ret["Street"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getCanton())
    {
        ret["Canton"]=getValueOfCanton();
    }
    else
    {
        ret["Canton"]=Json::Value();
    }
    if(getZip())
    {
        ret["Zip"]=getValueOfZip();
    }
    else
    {
        ret["Zip"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    return ret;
}

Json::Value Owner::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 14)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstname())
            {
                ret[pMasqueradingVector[1]]=getValueOfFirstname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastname())
            {
                ret[pMasqueradingVector[2]]=getValueOfLastname();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSex())
            {
                ret[pMasqueradingVector[3]]=getValueOfSex();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[4]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[5]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAvs())
            {
                ret[pMasqueradingVector[6]]=getValueOfAvs();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getBirthday())
            {
                ret[pMasqueradingVector[7]]=getValueOfBirthday();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCivilstatus())
            {
                ret[pMasqueradingVector[8]]=getValueOfCivilstatus();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getStreet())
            {
                ret[pMasqueradingVector[9]]=getValueOfStreet();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[10]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCanton())
            {
                ret[pMasqueradingVector[11]]=getValueOfCanton();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getZip())
            {
                ret[pMasqueradingVector[12]]=getValueOfZip();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getAccountid())
            {
                ret[pMasqueradingVector[13]]=getValueOfAccountid();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getSex())
    {
        ret["Sex"]=getValueOfSex();
    }
    else
    {
        ret["Sex"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getEmail())
    {
        ret["EMail"]=getValueOfEmail();
    }
    else
    {
        ret["EMail"]=Json::Value();
    }
    if(getAvs())
    {
        ret["AVS"]=getValueOfAvs();
    }
    else
    {
        ret["AVS"]=Json::Value();
    }
    if(getBirthday())
    {
        ret["BirthDay"]=getValueOfBirthday();
    }
    else
    {
        ret["BirthDay"]=Json::Value();
    }
    if(getCivilstatus())
    {
        ret["CivilStatus"]=getValueOfCivilstatus();
    }
    else
    {
        ret["CivilStatus"]=Json::Value();
    }
    if(getStreet())
    {
        ret["Street"]=getValueOfStreet();
    }
    else
    {
        ret["Street"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getCanton())
    {
        ret["Canton"]=getValueOfCanton();
    }
    else
    {
        ret["Canton"]=Json::Value();
    }
    if(getZip())
    {
        ret["Zip"]=getValueOfZip();
    }
    else
    {
        ret["Zip"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    return ret;
}

bool Owner::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    else
    {
        err="The Id column cannot be null";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, true))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, true))
            return false;
    }
    if(pJson.isMember("Sex"))
    {
        if(!validJsonOfField(3, "Sex", pJson["Sex"], err, true))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(4, "Phone", pJson["Phone"], err, true))
            return false;
    }
    if(pJson.isMember("EMail"))
    {
        if(!validJsonOfField(5, "EMail", pJson["EMail"], err, true))
            return false;
    }
    if(pJson.isMember("AVS"))
    {
        if(!validJsonOfField(6, "AVS", pJson["AVS"], err, true))
            return false;
    }
    if(pJson.isMember("BirthDay"))
    {
        if(!validJsonOfField(7, "BirthDay", pJson["BirthDay"], err, true))
            return false;
    }
    if(pJson.isMember("CivilStatus"))
    {
        if(!validJsonOfField(8, "CivilStatus", pJson["CivilStatus"], err, true))
            return false;
    }
    if(pJson.isMember("Street"))
    {
        if(!validJsonOfField(9, "Street", pJson["Street"], err, true))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(10, "City", pJson["City"], err, true))
            return false;
    }
    if(pJson.isMember("Canton"))
    {
        if(!validJsonOfField(11, "Canton", pJson["Canton"], err, true))
            return false;
    }
    if(pJson.isMember("Zip"))
    {
        if(!validJsonOfField(12, "Zip", pJson["Zip"], err, true))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(13, "AccountId", pJson["AccountId"], err, true))
            return false;
    }
    return true;
}
bool Owner::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Owner::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, false))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, false))
            return false;
    }
    if(pJson.isMember("Sex"))
    {
        if(!validJsonOfField(3, "Sex", pJson["Sex"], err, false))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(4, "Phone", pJson["Phone"], err, false))
            return false;
    }
    if(pJson.isMember("EMail"))
    {
        if(!validJsonOfField(5, "EMail", pJson["EMail"], err, false))
            return false;
    }
    if(pJson.isMember("AVS"))
    {
        if(!validJsonOfField(6, "AVS", pJson["AVS"], err, false))
            return false;
    }
    if(pJson.isMember("BirthDay"))
    {
        if(!validJsonOfField(7, "BirthDay", pJson["BirthDay"], err, false))
            return false;
    }
    if(pJson.isMember("CivilStatus"))
    {
        if(!validJsonOfField(8, "CivilStatus", pJson["CivilStatus"], err, false))
            return false;
    }
    if(pJson.isMember("Street"))
    {
        if(!validJsonOfField(9, "Street", pJson["Street"], err, false))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(10, "City", pJson["City"], err, false))
            return false;
    }
    if(pJson.isMember("Canton"))
    {
        if(!validJsonOfField(11, "Canton", pJson["Canton"], err, false))
            return false;
    }
    if(pJson.isMember("Zip"))
    {
        if(!validJsonOfField(12, "Zip", pJson["Zip"], err, false))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(13, "AccountId", pJson["AccountId"], err, false))
            return false;
    }
    return true;
}
bool Owner::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 14)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Owner::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 11)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 11)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 9)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 9)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 13)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 13)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 26)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 26)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 13)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 13)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 29)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 29)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 12)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 12)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 9)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 9)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
