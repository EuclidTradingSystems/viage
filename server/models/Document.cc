/**
 *
 *  Document.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Document.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string Document::Cols::_Id = "Id";
const std::string Document::Cols::_Category = "Category";
const std::string Document::Cols::_Extension = "Extension";
const std::string Document::Cols::_FileName = "FileName";
const std::string Document::Cols::_RelativePath = "RelativePath";
const std::string Document::Cols::_IsUploaded = "IsUploaded";
const std::string Document::Cols::_UploadDate = "UploadDate";
const std::string Document::Cols::_AccountId = "AccountId";
const std::string Document::Cols::_IsProcessed = "IsProcessed";
const std::string Document::primaryKeyName = "";
const bool Document::hasPrimaryKey = false;
const std::string Document::tableName = "document";

const std::vector<typename Document::MetaData> Document::metaData_={
{"Id","int16_t","smallint(6)",2,0,0,0},
{"Category","int16_t","smallint(6)",2,0,0,0},
{"Extension","std::string","varchar(3)",3,0,0,0},
{"FileName","std::string","varchar(36)",36,0,0,0},
{"RelativePath","std::string","varchar(28)",28,0,0,0},
{"IsUploaded","int8_t","tinyint(4)",1,0,0,0},
{"UploadDate","std::string","varchar(19)",19,0,0,0},
{"AccountId","int8_t","tinyint(4)",1,0,0,0},
{"IsProcessed","int8_t","tinyint(4)",1,0,0,0}
};
const std::string &Document::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Document::Document(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int16_t>(r["Id"].as<int16_t>());
        }
        if(!r["Category"].isNull())
        {
            category_=std::make_shared<int16_t>(r["Category"].as<int16_t>());
        }
        if(!r["Extension"].isNull())
        {
            extension_=std::make_shared<std::string>(r["Extension"].as<std::string>());
        }
        if(!r["FileName"].isNull())
        {
            filename_=std::make_shared<std::string>(r["FileName"].as<std::string>());
        }
        if(!r["RelativePath"].isNull())
        {
            relativepath_=std::make_shared<std::string>(r["RelativePath"].as<std::string>());
        }
        if(!r["IsUploaded"].isNull())
        {
            isuploaded_=std::make_shared<int8_t>(r["IsUploaded"].as<int8_t>());
        }
        if(!r["UploadDate"].isNull())
        {
            uploaddate_=std::make_shared<std::string>(r["UploadDate"].as<std::string>());
        }
        if(!r["AccountId"].isNull())
        {
            accountid_=std::make_shared<int8_t>(r["AccountId"].as<int8_t>());
        }
        if(!r["IsProcessed"].isNull())
        {
            isprocessed_=std::make_shared<int8_t>(r["IsProcessed"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            category_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            extension_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            filename_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            relativepath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            isuploaded_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            uploaddate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            accountid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            isprocessed_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Document::Document(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            category_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            extension_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            filename_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            relativepath_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            isuploaded_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            uploaddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isprocessed_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

Document::Document(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int16_t>((int16_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Category"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Category"].isNull())
        {
            category_=std::make_shared<int16_t>((int16_t)pJson["Category"].asInt64());
        }
    }
    if(pJson.isMember("Extension"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Extension"].isNull())
        {
            extension_=std::make_shared<std::string>(pJson["Extension"].asString());
        }
    }
    if(pJson.isMember("FileName"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["FileName"].isNull())
        {
            filename_=std::make_shared<std::string>(pJson["FileName"].asString());
        }
    }
    if(pJson.isMember("RelativePath"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["RelativePath"].isNull())
        {
            relativepath_=std::make_shared<std::string>(pJson["RelativePath"].asString());
        }
    }
    if(pJson.isMember("IsUploaded"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["IsUploaded"].isNull())
        {
            isuploaded_=std::make_shared<int8_t>((int8_t)pJson["IsUploaded"].asInt64());
        }
    }
    if(pJson.isMember("UploadDate"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["UploadDate"].isNull())
        {
            uploaddate_=std::make_shared<std::string>(pJson["UploadDate"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson["AccountId"].asInt64());
        }
    }
    if(pJson.isMember("IsProcessed"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["IsProcessed"].isNull())
        {
            isprocessed_=std::make_shared<int8_t>((int8_t)pJson["IsProcessed"].asInt64());
        }
    }
}

void Document::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            category_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            extension_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            filename_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            relativepath_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            isuploaded_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            uploaddate_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isprocessed_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

void Document::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int16_t>((int16_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("Category"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Category"].isNull())
        {
            category_=std::make_shared<int16_t>((int16_t)pJson["Category"].asInt64());
        }
    }
    if(pJson.isMember("Extension"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Extension"].isNull())
        {
            extension_=std::make_shared<std::string>(pJson["Extension"].asString());
        }
    }
    if(pJson.isMember("FileName"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["FileName"].isNull())
        {
            filename_=std::make_shared<std::string>(pJson["FileName"].asString());
        }
    }
    if(pJson.isMember("RelativePath"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["RelativePath"].isNull())
        {
            relativepath_=std::make_shared<std::string>(pJson["RelativePath"].asString());
        }
    }
    if(pJson.isMember("IsUploaded"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["IsUploaded"].isNull())
        {
            isuploaded_=std::make_shared<int8_t>((int8_t)pJson["IsUploaded"].asInt64());
        }
    }
    if(pJson.isMember("UploadDate"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["UploadDate"].isNull())
        {
            uploaddate_=std::make_shared<std::string>(pJson["UploadDate"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<int8_t>((int8_t)pJson["AccountId"].asInt64());
        }
    }
    if(pJson.isMember("IsProcessed"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["IsProcessed"].isNull())
        {
            isprocessed_=std::make_shared<int8_t>((int8_t)pJson["IsProcessed"].asInt64());
        }
    }
}

const int16_t &Document::getValueOfId() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Document::getId() const noexcept
{
    return id_;
}
void Document::setId(const int16_t &pId) noexcept
{
    id_ = std::make_shared<int16_t>(pId);
    dirtyFlag_[0] = true;
}
void Document::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const int16_t &Document::getValueOfCategory() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(category_)
        return *category_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Document::getCategory() const noexcept
{
    return category_;
}
void Document::setCategory(const int16_t &pCategory) noexcept
{
    category_ = std::make_shared<int16_t>(pCategory);
    dirtyFlag_[1] = true;
}
void Document::setCategoryToNull() noexcept
{
    category_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Document::getValueOfExtension() const noexcept
{
    const static std::string defaultValue = std::string();
    if(extension_)
        return *extension_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Document::getExtension() const noexcept
{
    return extension_;
}
void Document::setExtension(const std::string &pExtension) noexcept
{
    extension_ = std::make_shared<std::string>(pExtension);
    dirtyFlag_[2] = true;
}
void Document::setExtension(std::string &&pExtension) noexcept
{
    extension_ = std::make_shared<std::string>(std::move(pExtension));
    dirtyFlag_[2] = true;
}
void Document::setExtensionToNull() noexcept
{
    extension_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Document::getValueOfFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if(filename_)
        return *filename_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Document::getFilename() const noexcept
{
    return filename_;
}
void Document::setFilename(const std::string &pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(pFilename);
    dirtyFlag_[3] = true;
}
void Document::setFilename(std::string &&pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(std::move(pFilename));
    dirtyFlag_[3] = true;
}
void Document::setFilenameToNull() noexcept
{
    filename_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Document::getValueOfRelativepath() const noexcept
{
    const static std::string defaultValue = std::string();
    if(relativepath_)
        return *relativepath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Document::getRelativepath() const noexcept
{
    return relativepath_;
}
void Document::setRelativepath(const std::string &pRelativepath) noexcept
{
    relativepath_ = std::make_shared<std::string>(pRelativepath);
    dirtyFlag_[4] = true;
}
void Document::setRelativepath(std::string &&pRelativepath) noexcept
{
    relativepath_ = std::make_shared<std::string>(std::move(pRelativepath));
    dirtyFlag_[4] = true;
}
void Document::setRelativepathToNull() noexcept
{
    relativepath_.reset();
    dirtyFlag_[4] = true;
}

const int8_t &Document::getValueOfIsuploaded() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isuploaded_)
        return *isuploaded_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Document::getIsuploaded() const noexcept
{
    return isuploaded_;
}
void Document::setIsuploaded(const int8_t &pIsuploaded) noexcept
{
    isuploaded_ = std::make_shared<int8_t>(pIsuploaded);
    dirtyFlag_[5] = true;
}
void Document::setIsuploadedToNull() noexcept
{
    isuploaded_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Document::getValueOfUploaddate() const noexcept
{
    const static std::string defaultValue = std::string();
    if(uploaddate_)
        return *uploaddate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Document::getUploaddate() const noexcept
{
    return uploaddate_;
}
void Document::setUploaddate(const std::string &pUploaddate) noexcept
{
    uploaddate_ = std::make_shared<std::string>(pUploaddate);
    dirtyFlag_[6] = true;
}
void Document::setUploaddate(std::string &&pUploaddate) noexcept
{
    uploaddate_ = std::make_shared<std::string>(std::move(pUploaddate));
    dirtyFlag_[6] = true;
}
void Document::setUploaddateToNull() noexcept
{
    uploaddate_.reset();
    dirtyFlag_[6] = true;
}

const int8_t &Document::getValueOfAccountid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(accountid_)
        return *accountid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Document::getAccountid() const noexcept
{
    return accountid_;
}
void Document::setAccountid(const int8_t &pAccountid) noexcept
{
    accountid_ = std::make_shared<int8_t>(pAccountid);
    dirtyFlag_[7] = true;
}
void Document::setAccountidToNull() noexcept
{
    accountid_.reset();
    dirtyFlag_[7] = true;
}

const int8_t &Document::getValueOfIsprocessed() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isprocessed_)
        return *isprocessed_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Document::getIsprocessed() const noexcept
{
    return isprocessed_;
}
void Document::setIsprocessed(const int8_t &pIsprocessed) noexcept
{
    isprocessed_ = std::make_shared<int8_t>(pIsprocessed);
    dirtyFlag_[8] = true;
}
void Document::setIsprocessedToNull() noexcept
{
    isprocessed_.reset();
    dirtyFlag_[8] = true;
}

void Document::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Document::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "Category",
        "Extension",
        "FileName",
        "RelativePath",
        "IsUploaded",
        "UploadDate",
        "AccountId",
        "IsProcessed"
    };
    return inCols;
}

void Document::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCategory())
        {
            binder << getValueOfCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getExtension())
        {
            binder << getValueOfExtension();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRelativepath())
        {
            binder << getValueOfRelativepath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsuploaded())
        {
            binder << getValueOfIsuploaded();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUploaddate())
        {
            binder << getValueOfUploaddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsprocessed())
        {
            binder << getValueOfIsprocessed();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Document::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Document::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCategory())
        {
            binder << getValueOfCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getExtension())
        {
            binder << getValueOfExtension();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRelativepath())
        {
            binder << getValueOfRelativepath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsuploaded())
        {
            binder << getValueOfIsuploaded();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUploaddate())
        {
            binder << getValueOfUploaddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsprocessed())
        {
            binder << getValueOfIsprocessed();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Document::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getCategory())
    {
        ret["Category"]=getValueOfCategory();
    }
    else
    {
        ret["Category"]=Json::Value();
    }
    if(getExtension())
    {
        ret["Extension"]=getValueOfExtension();
    }
    else
    {
        ret["Extension"]=Json::Value();
    }
    if(getFilename())
    {
        ret["FileName"]=getValueOfFilename();
    }
    else
    {
        ret["FileName"]=Json::Value();
    }
    if(getRelativepath())
    {
        ret["RelativePath"]=getValueOfRelativepath();
    }
    else
    {
        ret["RelativePath"]=Json::Value();
    }
    if(getIsuploaded())
    {
        ret["IsUploaded"]=getValueOfIsuploaded();
    }
    else
    {
        ret["IsUploaded"]=Json::Value();
    }
    if(getUploaddate())
    {
        ret["UploadDate"]=getValueOfUploaddate();
    }
    else
    {
        ret["UploadDate"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    if(getIsprocessed())
    {
        ret["IsProcessed"]=getValueOfIsprocessed();
    }
    else
    {
        ret["IsProcessed"]=Json::Value();
    }
    return ret;
}

Json::Value Document::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCategory())
            {
                ret[pMasqueradingVector[1]]=getValueOfCategory();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getExtension())
            {
                ret[pMasqueradingVector[2]]=getValueOfExtension();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFilename())
            {
                ret[pMasqueradingVector[3]]=getValueOfFilename();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getRelativepath())
            {
                ret[pMasqueradingVector[4]]=getValueOfRelativepath();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIsuploaded())
            {
                ret[pMasqueradingVector[5]]=getValueOfIsuploaded();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUploaddate())
            {
                ret[pMasqueradingVector[6]]=getValueOfUploaddate();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAccountid())
            {
                ret[pMasqueradingVector[7]]=getValueOfAccountid();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsprocessed())
            {
                ret[pMasqueradingVector[8]]=getValueOfIsprocessed();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getCategory())
    {
        ret["Category"]=getValueOfCategory();
    }
    else
    {
        ret["Category"]=Json::Value();
    }
    if(getExtension())
    {
        ret["Extension"]=getValueOfExtension();
    }
    else
    {
        ret["Extension"]=Json::Value();
    }
    if(getFilename())
    {
        ret["FileName"]=getValueOfFilename();
    }
    else
    {
        ret["FileName"]=Json::Value();
    }
    if(getRelativepath())
    {
        ret["RelativePath"]=getValueOfRelativepath();
    }
    else
    {
        ret["RelativePath"]=Json::Value();
    }
    if(getIsuploaded())
    {
        ret["IsUploaded"]=getValueOfIsuploaded();
    }
    else
    {
        ret["IsUploaded"]=Json::Value();
    }
    if(getUploaddate())
    {
        ret["UploadDate"]=getValueOfUploaddate();
    }
    else
    {
        ret["UploadDate"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    if(getIsprocessed())
    {
        ret["IsProcessed"]=getValueOfIsprocessed();
    }
    else
    {
        ret["IsProcessed"]=Json::Value();
    }
    return ret;
}

bool Document::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    if(pJson.isMember("Category"))
    {
        if(!validJsonOfField(1, "Category", pJson["Category"], err, true))
            return false;
    }
    if(pJson.isMember("Extension"))
    {
        if(!validJsonOfField(2, "Extension", pJson["Extension"], err, true))
            return false;
    }
    if(pJson.isMember("FileName"))
    {
        if(!validJsonOfField(3, "FileName", pJson["FileName"], err, true))
            return false;
    }
    if(pJson.isMember("RelativePath"))
    {
        if(!validJsonOfField(4, "RelativePath", pJson["RelativePath"], err, true))
            return false;
    }
    if(pJson.isMember("IsUploaded"))
    {
        if(!validJsonOfField(5, "IsUploaded", pJson["IsUploaded"], err, true))
            return false;
    }
    if(pJson.isMember("UploadDate"))
    {
        if(!validJsonOfField(6, "UploadDate", pJson["UploadDate"], err, true))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(7, "AccountId", pJson["AccountId"], err, true))
            return false;
    }
    if(pJson.isMember("IsProcessed"))
    {
        if(!validJsonOfField(8, "IsProcessed", pJson["IsProcessed"], err, true))
            return false;
    }
    return true;
}
bool Document::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Document::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    if(pJson.isMember("Category"))
    {
        if(!validJsonOfField(1, "Category", pJson["Category"], err, false))
            return false;
    }
    if(pJson.isMember("Extension"))
    {
        if(!validJsonOfField(2, "Extension", pJson["Extension"], err, false))
            return false;
    }
    if(pJson.isMember("FileName"))
    {
        if(!validJsonOfField(3, "FileName", pJson["FileName"], err, false))
            return false;
    }
    if(pJson.isMember("RelativePath"))
    {
        if(!validJsonOfField(4, "RelativePath", pJson["RelativePath"], err, false))
            return false;
    }
    if(pJson.isMember("IsUploaded"))
    {
        if(!validJsonOfField(5, "IsUploaded", pJson["IsUploaded"], err, false))
            return false;
    }
    if(pJson.isMember("UploadDate"))
    {
        if(!validJsonOfField(6, "UploadDate", pJson["UploadDate"], err, false))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(7, "AccountId", pJson["AccountId"], err, false))
            return false;
    }
    if(pJson.isMember("IsProcessed"))
    {
        if(!validJsonOfField(8, "IsProcessed", pJson["IsProcessed"], err, false))
            return false;
    }
    return true;
}
bool Document::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Document::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 36)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 36)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 28)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 28)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 19)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 19)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
