/**
 *
 *  Contact.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Contact.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string Contact::Cols::_Id = "Id";
const std::string Contact::Cols::_FirstName = "FirstName";
const std::string Contact::Cols::_LastName = "LastName";
const std::string Contact::Cols::_Sex = "Sex";
const std::string Contact::Cols::_Phone = "Phone";
const std::string Contact::Cols::_EMail = "EMail";
const std::string Contact::Cols::_AccountId = "AccountId";
const std::string Contact::Cols::_IsInfant = "IsInfant";
const std::string Contact::primaryKeyName = "Id";
const bool Contact::hasPrimaryKey = true;
const std::string Contact::tableName = "contact";

const std::vector<typename Contact::MetaData> Contact::metaData_={
{"Id","int8_t","tinyint(4)",1,0,1,1},
{"FirstName","std::string","varchar(11)",11,0,0,0},
{"LastName","std::string","varchar(9)",9,0,0,0},
{"Sex","int8_t","tinyint(4)",1,0,0,0},
{"Phone","std::string","varchar(13)",13,0,0,0},
{"EMail","std::string","varchar(26)",26,0,0,0},
{"AccountId","std::string","varchar(2)",2,0,0,0},
{"IsInfant","int8_t","tinyint(4)",1,0,0,0}
};
const std::string &Contact::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Contact::Contact(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int8_t>(r["Id"].as<int8_t>());
        }
        if(!r["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(r["FirstName"].as<std::string>());
        }
        if(!r["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(r["LastName"].as<std::string>());
        }
        if(!r["Sex"].isNull())
        {
            sex_=std::make_shared<int8_t>(r["Sex"].as<int8_t>());
        }
        if(!r["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["Phone"].as<std::string>());
        }
        if(!r["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(r["EMail"].as<std::string>());
        }
        if(!r["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(r["AccountId"].as<std::string>());
        }
        if(!r["IsInfant"].isNull())
        {
            isinfant_=std::make_shared<int8_t>(r["IsInfant"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            lastname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            sex_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            accountid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            isinfant_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Contact::Contact(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            isinfant_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

Contact::Contact(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Sex"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Sex"].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson["Sex"].asInt64());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("EMail"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["EMail"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["AccountId"].asString());
        }
    }
    if(pJson.isMember("IsInfant"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["IsInfant"].isNull())
        {
            isinfant_=std::make_shared<int8_t>((int8_t)pJson["IsInfant"].asInt64());
        }
    }
}

void Contact::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            isinfant_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

void Contact::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Sex"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Sex"].isNull())
        {
            sex_=std::make_shared<int8_t>((int8_t)pJson["Sex"].asInt64());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("EMail"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["EMail"].asString());
        }
    }
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["AccountId"].asString());
        }
    }
    if(pJson.isMember("IsInfant"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["IsInfant"].isNull())
        {
            isinfant_=std::make_shared<int8_t>((int8_t)pJson["IsInfant"].asInt64());
        }
    }
}

const int8_t &Contact::getValueOfId() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Contact::getId() const noexcept
{
    return id_;
}
void Contact::setId(const int8_t &pId) noexcept
{
    id_ = std::make_shared<int8_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Contact::PrimaryKeyType & Contact::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Contact::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstname_)
        return *firstname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Contact::getFirstname() const noexcept
{
    return firstname_;
}
void Contact::setFirstname(const std::string &pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(pFirstname);
    dirtyFlag_[1] = true;
}
void Contact::setFirstname(std::string &&pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(std::move(pFirstname));
    dirtyFlag_[1] = true;
}
void Contact::setFirstnameToNull() noexcept
{
    firstname_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Contact::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastname_)
        return *lastname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Contact::getLastname() const noexcept
{
    return lastname_;
}
void Contact::setLastname(const std::string &pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(pLastname);
    dirtyFlag_[2] = true;
}
void Contact::setLastname(std::string &&pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(std::move(pLastname));
    dirtyFlag_[2] = true;
}
void Contact::setLastnameToNull() noexcept
{
    lastname_.reset();
    dirtyFlag_[2] = true;
}

const int8_t &Contact::getValueOfSex() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(sex_)
        return *sex_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Contact::getSex() const noexcept
{
    return sex_;
}
void Contact::setSex(const int8_t &pSex) noexcept
{
    sex_ = std::make_shared<int8_t>(pSex);
    dirtyFlag_[3] = true;
}
void Contact::setSexToNull() noexcept
{
    sex_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Contact::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Contact::getPhone() const noexcept
{
    return phone_;
}
void Contact::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[4] = true;
}
void Contact::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[4] = true;
}
void Contact::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Contact::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Contact::getEmail() const noexcept
{
    return email_;
}
void Contact::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[5] = true;
}
void Contact::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[5] = true;
}
void Contact::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Contact::getValueOfAccountid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(accountid_)
        return *accountid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Contact::getAccountid() const noexcept
{
    return accountid_;
}
void Contact::setAccountid(const std::string &pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(pAccountid);
    dirtyFlag_[6] = true;
}
void Contact::setAccountid(std::string &&pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(std::move(pAccountid));
    dirtyFlag_[6] = true;
}
void Contact::setAccountidToNull() noexcept
{
    accountid_.reset();
    dirtyFlag_[6] = true;
}

const int8_t &Contact::getValueOfIsinfant() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isinfant_)
        return *isinfant_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Contact::getIsinfant() const noexcept
{
    return isinfant_;
}
void Contact::setIsinfant(const int8_t &pIsinfant) noexcept
{
    isinfant_ = std::make_shared<int8_t>(pIsinfant);
    dirtyFlag_[7] = true;
}
void Contact::setIsinfantToNull() noexcept
{
    isinfant_.reset();
    dirtyFlag_[7] = true;
}

void Contact::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Contact::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "FirstName",
        "LastName",
        "Sex",
        "Phone",
        "EMail",
        "AccountId",
        "IsInfant"
    };
    return inCols;
}

void Contact::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getIsinfant())
        {
            binder << getValueOfIsinfant();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Contact::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Contact::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getIsinfant())
        {
            binder << getValueOfIsinfant();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Contact::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getSex())
    {
        ret["Sex"]=getValueOfSex();
    }
    else
    {
        ret["Sex"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getEmail())
    {
        ret["EMail"]=getValueOfEmail();
    }
    else
    {
        ret["EMail"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    if(getIsinfant())
    {
        ret["IsInfant"]=getValueOfIsinfant();
    }
    else
    {
        ret["IsInfant"]=Json::Value();
    }
    return ret;
}

Json::Value Contact::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstname())
            {
                ret[pMasqueradingVector[1]]=getValueOfFirstname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastname())
            {
                ret[pMasqueradingVector[2]]=getValueOfLastname();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSex())
            {
                ret[pMasqueradingVector[3]]=getValueOfSex();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[4]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[5]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAccountid())
            {
                ret[pMasqueradingVector[6]]=getValueOfAccountid();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getIsinfant())
            {
                ret[pMasqueradingVector[7]]=getValueOfIsinfant();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getSex())
    {
        ret["Sex"]=getValueOfSex();
    }
    else
    {
        ret["Sex"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getEmail())
    {
        ret["EMail"]=getValueOfEmail();
    }
    else
    {
        ret["EMail"]=Json::Value();
    }
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    if(getIsinfant())
    {
        ret["IsInfant"]=getValueOfIsinfant();
    }
    else
    {
        ret["IsInfant"]=Json::Value();
    }
    return ret;
}

bool Contact::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    else
    {
        err="The Id column cannot be null";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, true))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, true))
            return false;
    }
    if(pJson.isMember("Sex"))
    {
        if(!validJsonOfField(3, "Sex", pJson["Sex"], err, true))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(4, "Phone", pJson["Phone"], err, true))
            return false;
    }
    if(pJson.isMember("EMail"))
    {
        if(!validJsonOfField(5, "EMail", pJson["EMail"], err, true))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(6, "AccountId", pJson["AccountId"], err, true))
            return false;
    }
    if(pJson.isMember("IsInfant"))
    {
        if(!validJsonOfField(7, "IsInfant", pJson["IsInfant"], err, true))
            return false;
    }
    return true;
}
bool Contact::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Contact::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, false))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, false))
            return false;
    }
    if(pJson.isMember("Sex"))
    {
        if(!validJsonOfField(3, "Sex", pJson["Sex"], err, false))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(4, "Phone", pJson["Phone"], err, false))
            return false;
    }
    if(pJson.isMember("EMail"))
    {
        if(!validJsonOfField(5, "EMail", pJson["EMail"], err, false))
            return false;
    }
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(6, "AccountId", pJson["AccountId"], err, false))
            return false;
    }
    if(pJson.isMember("IsInfant"))
    {
        if(!validJsonOfField(7, "IsInfant", pJson["IsInfant"], err, false))
            return false;
    }
    return true;
}
bool Contact::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Contact::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 11)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 11)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 9)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 9)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 13)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 13)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 26)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 26)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
