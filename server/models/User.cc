/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::viage;

const std::string User::Cols::_Id = "Id";
const std::string User::Cols::_FirstName = "FirstName";
const std::string User::Cols::_LastName = "LastName";
const std::string User::Cols::_Login = "Login";
const std::string User::Cols::_Password = "Password";
const std::string User::Cols::_IsSystemAdministrator = "IsSystemAdministrator";
const std::string User::Cols::_EMail = "EMail";
const std::string User::Cols::_Phone = "Phone";
const std::string User::Cols::_Clearance = "Clearance";
const std::string User::Cols::_Beneficiary = "Beneficiary";
const std::string User::Cols::_Bic = "Bic";
const std::string User::Cols::_Iban = "Iban";
const std::string User::Cols::_Street = "Street";
const std::string User::Cols::_City = "City";
const std::string User::Cols::_Canton = "Canton";
const std::string User::Cols::_Zip = "Zip";
const std::string User::Cols::_CompanyId = "CompanyId";
const std::string User::Cols::_TeamId = "TeamId";
const std::string User::Cols::_IsLocked = "IsLocked";
const std::string User::primaryKeyName = "Id";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_={
{"Id","int8_t","tinyint(4)",1,0,1,1},
{"FirstName","std::string","varchar(10)",10,0,0,0},
{"LastName","std::string","varchar(15)",15,0,0,0},
{"Login","std::string","varchar(24)",24,0,0,0},
{"Password","std::string","varchar(32)",32,0,0,0},
{"IsSystemAdministrator","int8_t","tinyint(4)",1,0,0,0},
{"EMail","std::string","varchar(42)",42,0,0,0},
{"Phone","std::string","varchar(16)",16,0,0,0},
{"Clearance","int8_t","tinyint(4)",1,0,0,0},
{"Beneficiary","std::string","varchar(37)",37,0,0,0},
{"Bic","std::string","varchar(38)",38,0,0,0},
{"Iban","std::string","varchar(42)",42,0,0,0},
{"Street","std::string","varchar(36)",36,0,0,0},
{"City","std::string","varchar(10)",10,0,0,0},
{"Canton","std::string","varchar(10)",10,0,0,0},
{"Zip","int32_t","mediumint(9)",3,0,0,0},
{"CompanyId","int8_t","tinyint(4)",1,0,0,0},
{"TeamId","int8_t","tinyint(4)",1,0,0,0},
{"IsLocked","int8_t","tinyint(4)",1,0,0,0}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["Id"].isNull())
        {
            id_=std::make_shared<int8_t>(r["Id"].as<int8_t>());
        }
        if(!r["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(r["FirstName"].as<std::string>());
        }
        if(!r["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(r["LastName"].as<std::string>());
        }
        if(!r["Login"].isNull())
        {
            login_=std::make_shared<std::string>(r["Login"].as<std::string>());
        }
        if(!r["Password"].isNull())
        {
            password_=std::make_shared<std::string>(r["Password"].as<std::string>());
        }
        if(!r["IsSystemAdministrator"].isNull())
        {
            issystemadministrator_=std::make_shared<int8_t>(r["IsSystemAdministrator"].as<int8_t>());
        }
        if(!r["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(r["EMail"].as<std::string>());
        }
        if(!r["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["Phone"].as<std::string>());
        }
        if(!r["Clearance"].isNull())
        {
            clearance_=std::make_shared<int8_t>(r["Clearance"].as<int8_t>());
        }
        if(!r["Beneficiary"].isNull())
        {
            beneficiary_=std::make_shared<std::string>(r["Beneficiary"].as<std::string>());
        }
        if(!r["Bic"].isNull())
        {
            bic_=std::make_shared<std::string>(r["Bic"].as<std::string>());
        }
        if(!r["Iban"].isNull())
        {
            iban_=std::make_shared<std::string>(r["Iban"].as<std::string>());
        }
        if(!r["Street"].isNull())
        {
            street_=std::make_shared<std::string>(r["Street"].as<std::string>());
        }
        if(!r["City"].isNull())
        {
            city_=std::make_shared<std::string>(r["City"].as<std::string>());
        }
        if(!r["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(r["Canton"].as<std::string>());
        }
        if(!r["Zip"].isNull())
        {
            zip_=std::make_shared<int32_t>(r["Zip"].as<int32_t>());
        }
        if(!r["CompanyId"].isNull())
        {
            companyid_=std::make_shared<int8_t>(r["CompanyId"].as<int8_t>());
        }
        if(!r["TeamId"].isNull())
        {
            teamid_=std::make_shared<int8_t>(r["TeamId"].as<int8_t>());
        }
        if(!r["IsLocked"].isNull())
        {
            islocked_=std::make_shared<int8_t>(r["IsLocked"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 19 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            lastname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            login_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            issystemadministrator_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            clearance_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            beneficiary_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            bic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            iban_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            street_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            canton_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            zip_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            companyid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            teamid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            islocked_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 19)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            login_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            issystemadministrator_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            clearance_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            beneficiary_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            bic_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            iban_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            street_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            canton_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            zip_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            teamid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            islocked_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Login"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["Login"].isNull())
        {
            login_=std::make_shared<std::string>(pJson["Login"].asString());
        }
    }
    if(pJson.isMember("Password"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["Password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["Password"].asString());
        }
    }
    if(pJson.isMember("IsSystemAdministrator"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["IsSystemAdministrator"].isNull())
        {
            issystemadministrator_=std::make_shared<int8_t>((int8_t)pJson["IsSystemAdministrator"].asInt64());
        }
    }
    if(pJson.isMember("EMail"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["EMail"].asString());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("Clearance"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Clearance"].isNull())
        {
            clearance_=std::make_shared<int8_t>((int8_t)pJson["Clearance"].asInt64());
        }
    }
    if(pJson.isMember("Beneficiary"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["Beneficiary"].isNull())
        {
            beneficiary_=std::make_shared<std::string>(pJson["Beneficiary"].asString());
        }
    }
    if(pJson.isMember("Bic"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["Bic"].isNull())
        {
            bic_=std::make_shared<std::string>(pJson["Bic"].asString());
        }
    }
    if(pJson.isMember("Iban"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["Iban"].isNull())
        {
            iban_=std::make_shared<std::string>(pJson["Iban"].asString());
        }
    }
    if(pJson.isMember("Street"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["Street"].isNull())
        {
            street_=std::make_shared<std::string>(pJson["Street"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("Canton"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(pJson["Canton"].asString());
        }
    }
    if(pJson.isMember("Zip"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["Zip"].isNull())
        {
            zip_=std::make_shared<int32_t>((int32_t)pJson["Zip"].asInt64());
        }
    }
    if(pJson.isMember("CompanyId"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["CompanyId"].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson["CompanyId"].asInt64());
        }
    }
    if(pJson.isMember("TeamId"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["TeamId"].isNull())
        {
            teamid_=std::make_shared<int8_t>((int8_t)pJson["TeamId"].asInt64());
        }
    }
    if(pJson.isMember("IsLocked"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["IsLocked"].isNull())
        {
            islocked_=std::make_shared<int8_t>((int8_t)pJson["IsLocked"].asInt64());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 19)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            login_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            issystemadministrator_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            clearance_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            beneficiary_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            bic_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            iban_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            street_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            canton_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            zip_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            teamid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            islocked_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
}

void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("Id"))
    {
        if(!pJson["Id"].isNull())
        {
            id_=std::make_shared<int8_t>((int8_t)pJson["Id"].asInt64());
        }
    }
    if(pJson.isMember("FirstName"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["FirstName"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["FirstName"].asString());
        }
    }
    if(pJson.isMember("LastName"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["LastName"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["LastName"].asString());
        }
    }
    if(pJson.isMember("Login"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["Login"].isNull())
        {
            login_=std::make_shared<std::string>(pJson["Login"].asString());
        }
    }
    if(pJson.isMember("Password"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["Password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["Password"].asString());
        }
    }
    if(pJson.isMember("IsSystemAdministrator"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["IsSystemAdministrator"].isNull())
        {
            issystemadministrator_=std::make_shared<int8_t>((int8_t)pJson["IsSystemAdministrator"].asInt64());
        }
    }
    if(pJson.isMember("EMail"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["EMail"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["EMail"].asString());
        }
    }
    if(pJson.isMember("Phone"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["Phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["Phone"].asString());
        }
    }
    if(pJson.isMember("Clearance"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Clearance"].isNull())
        {
            clearance_=std::make_shared<int8_t>((int8_t)pJson["Clearance"].asInt64());
        }
    }
    if(pJson.isMember("Beneficiary"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["Beneficiary"].isNull())
        {
            beneficiary_=std::make_shared<std::string>(pJson["Beneficiary"].asString());
        }
    }
    if(pJson.isMember("Bic"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["Bic"].isNull())
        {
            bic_=std::make_shared<std::string>(pJson["Bic"].asString());
        }
    }
    if(pJson.isMember("Iban"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["Iban"].isNull())
        {
            iban_=std::make_shared<std::string>(pJson["Iban"].asString());
        }
    }
    if(pJson.isMember("Street"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["Street"].isNull())
        {
            street_=std::make_shared<std::string>(pJson["Street"].asString());
        }
    }
    if(pJson.isMember("City"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["City"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["City"].asString());
        }
    }
    if(pJson.isMember("Canton"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["Canton"].isNull())
        {
            canton_=std::make_shared<std::string>(pJson["Canton"].asString());
        }
    }
    if(pJson.isMember("Zip"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["Zip"].isNull())
        {
            zip_=std::make_shared<int32_t>((int32_t)pJson["Zip"].asInt64());
        }
    }
    if(pJson.isMember("CompanyId"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["CompanyId"].isNull())
        {
            companyid_=std::make_shared<int8_t>((int8_t)pJson["CompanyId"].asInt64());
        }
    }
    if(pJson.isMember("TeamId"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["TeamId"].isNull())
        {
            teamid_=std::make_shared<int8_t>((int8_t)pJson["TeamId"].asInt64());
        }
    }
    if(pJson.isMember("IsLocked"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["IsLocked"].isNull())
        {
            islocked_=std::make_shared<int8_t>((int8_t)pJson["IsLocked"].asInt64());
        }
    }
}

const int8_t &User::getValueOfId() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getId() const noexcept
{
    return id_;
}
void User::setId(const int8_t &pId) noexcept
{
    id_ = std::make_shared<int8_t>(pId);
    dirtyFlag_[0] = true;
}
const typename User::PrimaryKeyType & User::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &User::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstname_)
        return *firstname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getFirstname() const noexcept
{
    return firstname_;
}
void User::setFirstname(const std::string &pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(pFirstname);
    dirtyFlag_[1] = true;
}
void User::setFirstname(std::string &&pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(std::move(pFirstname));
    dirtyFlag_[1] = true;
}
void User::setFirstnameToNull() noexcept
{
    firstname_.reset();
    dirtyFlag_[1] = true;
}

const std::string &User::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastname_)
        return *lastname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getLastname() const noexcept
{
    return lastname_;
}
void User::setLastname(const std::string &pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(pLastname);
    dirtyFlag_[2] = true;
}
void User::setLastname(std::string &&pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(std::move(pLastname));
    dirtyFlag_[2] = true;
}
void User::setLastnameToNull() noexcept
{
    lastname_.reset();
    dirtyFlag_[2] = true;
}

const std::string &User::getValueOfLogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(login_)
        return *login_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getLogin() const noexcept
{
    return login_;
}
void User::setLogin(const std::string &pLogin) noexcept
{
    login_ = std::make_shared<std::string>(pLogin);
    dirtyFlag_[3] = true;
}
void User::setLogin(std::string &&pLogin) noexcept
{
    login_ = std::make_shared<std::string>(std::move(pLogin));
    dirtyFlag_[3] = true;
}
void User::setLoginToNull() noexcept
{
    login_.reset();
    dirtyFlag_[3] = true;
}

const std::string &User::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPassword() const noexcept
{
    return password_;
}
void User::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[4] = true;
}
void User::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[4] = true;
}
void User::setPasswordToNull() noexcept
{
    password_.reset();
    dirtyFlag_[4] = true;
}

const int8_t &User::getValueOfIssystemadministrator() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(issystemadministrator_)
        return *issystemadministrator_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getIssystemadministrator() const noexcept
{
    return issystemadministrator_;
}
void User::setIssystemadministrator(const int8_t &pIssystemadministrator) noexcept
{
    issystemadministrator_ = std::make_shared<int8_t>(pIssystemadministrator);
    dirtyFlag_[5] = true;
}
void User::setIssystemadministratorToNull() noexcept
{
    issystemadministrator_.reset();
    dirtyFlag_[5] = true;
}

const std::string &User::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getEmail() const noexcept
{
    return email_;
}
void User::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[6] = true;
}
void User::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[6] = true;
}
void User::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[6] = true;
}

const std::string &User::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPhone() const noexcept
{
    return phone_;
}
void User::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[7] = true;
}
void User::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[7] = true;
}
void User::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[7] = true;
}

const int8_t &User::getValueOfClearance() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(clearance_)
        return *clearance_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getClearance() const noexcept
{
    return clearance_;
}
void User::setClearance(const int8_t &pClearance) noexcept
{
    clearance_ = std::make_shared<int8_t>(pClearance);
    dirtyFlag_[8] = true;
}
void User::setClearanceToNull() noexcept
{
    clearance_.reset();
    dirtyFlag_[8] = true;
}

const std::string &User::getValueOfBeneficiary() const noexcept
{
    const static std::string defaultValue = std::string();
    if(beneficiary_)
        return *beneficiary_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getBeneficiary() const noexcept
{
    return beneficiary_;
}
void User::setBeneficiary(const std::string &pBeneficiary) noexcept
{
    beneficiary_ = std::make_shared<std::string>(pBeneficiary);
    dirtyFlag_[9] = true;
}
void User::setBeneficiary(std::string &&pBeneficiary) noexcept
{
    beneficiary_ = std::make_shared<std::string>(std::move(pBeneficiary));
    dirtyFlag_[9] = true;
}
void User::setBeneficiaryToNull() noexcept
{
    beneficiary_.reset();
    dirtyFlag_[9] = true;
}

const std::string &User::getValueOfBic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bic_)
        return *bic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getBic() const noexcept
{
    return bic_;
}
void User::setBic(const std::string &pBic) noexcept
{
    bic_ = std::make_shared<std::string>(pBic);
    dirtyFlag_[10] = true;
}
void User::setBic(std::string &&pBic) noexcept
{
    bic_ = std::make_shared<std::string>(std::move(pBic));
    dirtyFlag_[10] = true;
}
void User::setBicToNull() noexcept
{
    bic_.reset();
    dirtyFlag_[10] = true;
}

const std::string &User::getValueOfIban() const noexcept
{
    const static std::string defaultValue = std::string();
    if(iban_)
        return *iban_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getIban() const noexcept
{
    return iban_;
}
void User::setIban(const std::string &pIban) noexcept
{
    iban_ = std::make_shared<std::string>(pIban);
    dirtyFlag_[11] = true;
}
void User::setIban(std::string &&pIban) noexcept
{
    iban_ = std::make_shared<std::string>(std::move(pIban));
    dirtyFlag_[11] = true;
}
void User::setIbanToNull() noexcept
{
    iban_.reset();
    dirtyFlag_[11] = true;
}

const std::string &User::getValueOfStreet() const noexcept
{
    const static std::string defaultValue = std::string();
    if(street_)
        return *street_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getStreet() const noexcept
{
    return street_;
}
void User::setStreet(const std::string &pStreet) noexcept
{
    street_ = std::make_shared<std::string>(pStreet);
    dirtyFlag_[12] = true;
}
void User::setStreet(std::string &&pStreet) noexcept
{
    street_ = std::make_shared<std::string>(std::move(pStreet));
    dirtyFlag_[12] = true;
}
void User::setStreetToNull() noexcept
{
    street_.reset();
    dirtyFlag_[12] = true;
}

const std::string &User::getValueOfCity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getCity() const noexcept
{
    return city_;
}
void User::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[13] = true;
}
void User::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[13] = true;
}
void User::setCityToNull() noexcept
{
    city_.reset();
    dirtyFlag_[13] = true;
}

const std::string &User::getValueOfCanton() const noexcept
{
    const static std::string defaultValue = std::string();
    if(canton_)
        return *canton_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getCanton() const noexcept
{
    return canton_;
}
void User::setCanton(const std::string &pCanton) noexcept
{
    canton_ = std::make_shared<std::string>(pCanton);
    dirtyFlag_[14] = true;
}
void User::setCanton(std::string &&pCanton) noexcept
{
    canton_ = std::make_shared<std::string>(std::move(pCanton));
    dirtyFlag_[14] = true;
}
void User::setCantonToNull() noexcept
{
    canton_.reset();
    dirtyFlag_[14] = true;
}

const int32_t &User::getValueOfZip() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(zip_)
        return *zip_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getZip() const noexcept
{
    return zip_;
}
void User::setZip(const int32_t &pZip) noexcept
{
    zip_ = std::make_shared<int32_t>(pZip);
    dirtyFlag_[15] = true;
}
void User::setZipToNull() noexcept
{
    zip_.reset();
    dirtyFlag_[15] = true;
}

const int8_t &User::getValueOfCompanyid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(companyid_)
        return *companyid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getCompanyid() const noexcept
{
    return companyid_;
}
void User::setCompanyid(const int8_t &pCompanyid) noexcept
{
    companyid_ = std::make_shared<int8_t>(pCompanyid);
    dirtyFlag_[16] = true;
}
void User::setCompanyidToNull() noexcept
{
    companyid_.reset();
    dirtyFlag_[16] = true;
}

const int8_t &User::getValueOfTeamid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(teamid_)
        return *teamid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getTeamid() const noexcept
{
    return teamid_;
}
void User::setTeamid(const int8_t &pTeamid) noexcept
{
    teamid_ = std::make_shared<int8_t>(pTeamid);
    dirtyFlag_[17] = true;
}
void User::setTeamidToNull() noexcept
{
    teamid_.reset();
    dirtyFlag_[17] = true;
}

const int8_t &User::getValueOfIslocked() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(islocked_)
        return *islocked_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getIslocked() const noexcept
{
    return islocked_;
}
void User::setIslocked(const int8_t &pIslocked) noexcept
{
    islocked_ = std::make_shared<int8_t>(pIslocked);
    dirtyFlag_[18] = true;
}
void User::setIslockedToNull() noexcept
{
    islocked_.reset();
    dirtyFlag_[18] = true;
}

void User::updateId(const uint64_t id)
{
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "Id",
        "FirstName",
        "LastName",
        "Login",
        "Password",
        "IsSystemAdministrator",
        "EMail",
        "Phone",
        "Clearance",
        "Beneficiary",
        "Bic",
        "Iban",
        "Street",
        "City",
        "Canton",
        "Zip",
        "CompanyId",
        "TeamId",
        "IsLocked"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIssystemadministrator())
        {
            binder << getValueOfIssystemadministrator();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getClearance())
        {
            binder << getValueOfClearance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getBeneficiary())
        {
            binder << getValueOfBeneficiary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getBic())
        {
            binder << getValueOfBic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIban())
        {
            binder << getValueOfIban();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getStreet())
        {
            binder << getValueOfStreet();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCanton())
        {
            binder << getValueOfCanton();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getZip())
        {
            binder << getValueOfZip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyid())
        {
            binder << getValueOfCompanyid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getTeamid())
        {
            binder << getValueOfTeamid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getIslocked())
        {
            binder << getValueOfIslocked();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIssystemadministrator())
        {
            binder << getValueOfIssystemadministrator();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getClearance())
        {
            binder << getValueOfClearance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getBeneficiary())
        {
            binder << getValueOfBeneficiary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getBic())
        {
            binder << getValueOfBic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIban())
        {
            binder << getValueOfIban();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getStreet())
        {
            binder << getValueOfStreet();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCanton())
        {
            binder << getValueOfCanton();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getZip())
        {
            binder << getValueOfZip();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getCompanyid())
        {
            binder << getValueOfCompanyid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getTeamid())
        {
            binder << getValueOfTeamid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getIslocked())
        {
            binder << getValueOfIslocked();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getLogin())
    {
        ret["Login"]=getValueOfLogin();
    }
    else
    {
        ret["Login"]=Json::Value();
    }
    if(getPassword())
    {
        ret["Password"]=getValueOfPassword();
    }
    else
    {
        ret["Password"]=Json::Value();
    }
    if(getIssystemadministrator())
    {
        ret["IsSystemAdministrator"]=getValueOfIssystemadministrator();
    }
    else
    {
        ret["IsSystemAdministrator"]=Json::Value();
    }
    if(getEmail())
    {
        ret["EMail"]=getValueOfEmail();
    }
    else
    {
        ret["EMail"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getClearance())
    {
        ret["Clearance"]=getValueOfClearance();
    }
    else
    {
        ret["Clearance"]=Json::Value();
    }
    if(getBeneficiary())
    {
        ret["Beneficiary"]=getValueOfBeneficiary();
    }
    else
    {
        ret["Beneficiary"]=Json::Value();
    }
    if(getBic())
    {
        ret["Bic"]=getValueOfBic();
    }
    else
    {
        ret["Bic"]=Json::Value();
    }
    if(getIban())
    {
        ret["Iban"]=getValueOfIban();
    }
    else
    {
        ret["Iban"]=Json::Value();
    }
    if(getStreet())
    {
        ret["Street"]=getValueOfStreet();
    }
    else
    {
        ret["Street"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getCanton())
    {
        ret["Canton"]=getValueOfCanton();
    }
    else
    {
        ret["Canton"]=Json::Value();
    }
    if(getZip())
    {
        ret["Zip"]=getValueOfZip();
    }
    else
    {
        ret["Zip"]=Json::Value();
    }
    if(getCompanyid())
    {
        ret["CompanyId"]=getValueOfCompanyid();
    }
    else
    {
        ret["CompanyId"]=Json::Value();
    }
    if(getTeamid())
    {
        ret["TeamId"]=getValueOfTeamid();
    }
    else
    {
        ret["TeamId"]=Json::Value();
    }
    if(getIslocked())
    {
        ret["IsLocked"]=getValueOfIslocked();
    }
    else
    {
        ret["IsLocked"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 19)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstname())
            {
                ret[pMasqueradingVector[1]]=getValueOfFirstname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastname())
            {
                ret[pMasqueradingVector[2]]=getValueOfLastname();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getLogin())
            {
                ret[pMasqueradingVector[3]]=getValueOfLogin();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[4]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIssystemadministrator())
            {
                ret[pMasqueradingVector[5]]=getValueOfIssystemadministrator();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[6]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[7]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getClearance())
            {
                ret[pMasqueradingVector[8]]=getValueOfClearance();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getBeneficiary())
            {
                ret[pMasqueradingVector[9]]=getValueOfBeneficiary();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getBic())
            {
                ret[pMasqueradingVector[10]]=getValueOfBic();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIban())
            {
                ret[pMasqueradingVector[11]]=getValueOfIban();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getStreet())
            {
                ret[pMasqueradingVector[12]]=getValueOfStreet();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[13]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getCanton())
            {
                ret[pMasqueradingVector[14]]=getValueOfCanton();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getZip())
            {
                ret[pMasqueradingVector[15]]=getValueOfZip();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCompanyid())
            {
                ret[pMasqueradingVector[16]]=getValueOfCompanyid();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getTeamid())
            {
                ret[pMasqueradingVector[17]]=getValueOfTeamid();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getIslocked())
            {
                ret[pMasqueradingVector[18]]=getValueOfIslocked();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["Id"]=getValueOfId();
    }
    else
    {
        ret["Id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["FirstName"]=getValueOfFirstname();
    }
    else
    {
        ret["FirstName"]=Json::Value();
    }
    if(getLastname())
    {
        ret["LastName"]=getValueOfLastname();
    }
    else
    {
        ret["LastName"]=Json::Value();
    }
    if(getLogin())
    {
        ret["Login"]=getValueOfLogin();
    }
    else
    {
        ret["Login"]=Json::Value();
    }
    if(getPassword())
    {
        ret["Password"]=getValueOfPassword();
    }
    else
    {
        ret["Password"]=Json::Value();
    }
    if(getIssystemadministrator())
    {
        ret["IsSystemAdministrator"]=getValueOfIssystemadministrator();
    }
    else
    {
        ret["IsSystemAdministrator"]=Json::Value();
    }
    if(getEmail())
    {
        ret["EMail"]=getValueOfEmail();
    }
    else
    {
        ret["EMail"]=Json::Value();
    }
    if(getPhone())
    {
        ret["Phone"]=getValueOfPhone();
    }
    else
    {
        ret["Phone"]=Json::Value();
    }
    if(getClearance())
    {
        ret["Clearance"]=getValueOfClearance();
    }
    else
    {
        ret["Clearance"]=Json::Value();
    }
    if(getBeneficiary())
    {
        ret["Beneficiary"]=getValueOfBeneficiary();
    }
    else
    {
        ret["Beneficiary"]=Json::Value();
    }
    if(getBic())
    {
        ret["Bic"]=getValueOfBic();
    }
    else
    {
        ret["Bic"]=Json::Value();
    }
    if(getIban())
    {
        ret["Iban"]=getValueOfIban();
    }
    else
    {
        ret["Iban"]=Json::Value();
    }
    if(getStreet())
    {
        ret["Street"]=getValueOfStreet();
    }
    else
    {
        ret["Street"]=Json::Value();
    }
    if(getCity())
    {
        ret["City"]=getValueOfCity();
    }
    else
    {
        ret["City"]=Json::Value();
    }
    if(getCanton())
    {
        ret["Canton"]=getValueOfCanton();
    }
    else
    {
        ret["Canton"]=Json::Value();
    }
    if(getZip())
    {
        ret["Zip"]=getValueOfZip();
    }
    else
    {
        ret["Zip"]=Json::Value();
    }
    if(getCompanyid())
    {
        ret["CompanyId"]=getValueOfCompanyid();
    }
    else
    {
        ret["CompanyId"]=Json::Value();
    }
    if(getTeamid())
    {
        ret["TeamId"]=getValueOfTeamid();
    }
    else
    {
        ret["TeamId"]=Json::Value();
    }
    if(getIslocked())
    {
        ret["IsLocked"]=getValueOfIslocked();
    }
    else
    {
        ret["IsLocked"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, true))
            return false;
    }
    else
    {
        err="The Id column cannot be null";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, true))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, true))
            return false;
    }
    if(pJson.isMember("Login"))
    {
        if(!validJsonOfField(3, "Login", pJson["Login"], err, true))
            return false;
    }
    if(pJson.isMember("Password"))
    {
        if(!validJsonOfField(4, "Password", pJson["Password"], err, true))
            return false;
    }
    if(pJson.isMember("IsSystemAdministrator"))
    {
        if(!validJsonOfField(5, "IsSystemAdministrator", pJson["IsSystemAdministrator"], err, true))
            return false;
    }
    if(pJson.isMember("EMail"))
    {
        if(!validJsonOfField(6, "EMail", pJson["EMail"], err, true))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(7, "Phone", pJson["Phone"], err, true))
            return false;
    }
    if(pJson.isMember("Clearance"))
    {
        if(!validJsonOfField(8, "Clearance", pJson["Clearance"], err, true))
            return false;
    }
    if(pJson.isMember("Beneficiary"))
    {
        if(!validJsonOfField(9, "Beneficiary", pJson["Beneficiary"], err, true))
            return false;
    }
    if(pJson.isMember("Bic"))
    {
        if(!validJsonOfField(10, "Bic", pJson["Bic"], err, true))
            return false;
    }
    if(pJson.isMember("Iban"))
    {
        if(!validJsonOfField(11, "Iban", pJson["Iban"], err, true))
            return false;
    }
    if(pJson.isMember("Street"))
    {
        if(!validJsonOfField(12, "Street", pJson["Street"], err, true))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(13, "City", pJson["City"], err, true))
            return false;
    }
    if(pJson.isMember("Canton"))
    {
        if(!validJsonOfField(14, "Canton", pJson["Canton"], err, true))
            return false;
    }
    if(pJson.isMember("Zip"))
    {
        if(!validJsonOfField(15, "Zip", pJson["Zip"], err, true))
            return false;
    }
    if(pJson.isMember("CompanyId"))
    {
        if(!validJsonOfField(16, "CompanyId", pJson["CompanyId"], err, true))
            return false;
    }
    if(pJson.isMember("TeamId"))
    {
        if(!validJsonOfField(17, "TeamId", pJson["TeamId"], err, true))
            return false;
    }
    if(pJson.isMember("IsLocked"))
    {
        if(!validJsonOfField(18, "IsLocked", pJson["IsLocked"], err, true))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 19)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("Id"))
    {
        if(!validJsonOfField(0, "Id", pJson["Id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("FirstName"))
    {
        if(!validJsonOfField(1, "FirstName", pJson["FirstName"], err, false))
            return false;
    }
    if(pJson.isMember("LastName"))
    {
        if(!validJsonOfField(2, "LastName", pJson["LastName"], err, false))
            return false;
    }
    if(pJson.isMember("Login"))
    {
        if(!validJsonOfField(3, "Login", pJson["Login"], err, false))
            return false;
    }
    if(pJson.isMember("Password"))
    {
        if(!validJsonOfField(4, "Password", pJson["Password"], err, false))
            return false;
    }
    if(pJson.isMember("IsSystemAdministrator"))
    {
        if(!validJsonOfField(5, "IsSystemAdministrator", pJson["IsSystemAdministrator"], err, false))
            return false;
    }
    if(pJson.isMember("EMail"))
    {
        if(!validJsonOfField(6, "EMail", pJson["EMail"], err, false))
            return false;
    }
    if(pJson.isMember("Phone"))
    {
        if(!validJsonOfField(7, "Phone", pJson["Phone"], err, false))
            return false;
    }
    if(pJson.isMember("Clearance"))
    {
        if(!validJsonOfField(8, "Clearance", pJson["Clearance"], err, false))
            return false;
    }
    if(pJson.isMember("Beneficiary"))
    {
        if(!validJsonOfField(9, "Beneficiary", pJson["Beneficiary"], err, false))
            return false;
    }
    if(pJson.isMember("Bic"))
    {
        if(!validJsonOfField(10, "Bic", pJson["Bic"], err, false))
            return false;
    }
    if(pJson.isMember("Iban"))
    {
        if(!validJsonOfField(11, "Iban", pJson["Iban"], err, false))
            return false;
    }
    if(pJson.isMember("Street"))
    {
        if(!validJsonOfField(12, "Street", pJson["Street"], err, false))
            return false;
    }
    if(pJson.isMember("City"))
    {
        if(!validJsonOfField(13, "City", pJson["City"], err, false))
            return false;
    }
    if(pJson.isMember("Canton"))
    {
        if(!validJsonOfField(14, "Canton", pJson["Canton"], err, false))
            return false;
    }
    if(pJson.isMember("Zip"))
    {
        if(!validJsonOfField(15, "Zip", pJson["Zip"], err, false))
            return false;
    }
    if(pJson.isMember("CompanyId"))
    {
        if(!validJsonOfField(16, "CompanyId", pJson["CompanyId"], err, false))
            return false;
    }
    if(pJson.isMember("TeamId"))
    {
        if(!validJsonOfField(17, "TeamId", pJson["TeamId"], err, false))
            return false;
    }
    if(pJson.isMember("IsLocked"))
    {
        if(!validJsonOfField(18, "IsLocked", pJson["IsLocked"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 19)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 15)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 15)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 24)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 24)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 42)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 42)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 16)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 16)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 37)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 37)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 38)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 38)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 42)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 42)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 36)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 36)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
