name: Windows

on:
  push
#  push:
#    tags:
#      - '*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  QT_VERSION: 6.3.2

jobs:
  build_release:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: seanmiddleditch/gha-setup-ninja@v3
    - uses: actions/setup-python@v1
    - uses: BSFishy/pip-action@v1
      with:
        packages: |
            aqtinstall
            conan
    - run: aqt install-qt windows desktop ${{env.QT_VERSION}} win64_mingw -m qtmultimedia
    - run: aqt install-tool windows desktop tools_ifw
    - run: conan install . --build=missing

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -GNinja -B ${{github.workspace}}/build
        -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_PREFIX_PATH=${{github.workspace}}/${{env.QT_VERSION}}/mingw_64
        -DCPACK_IFW_ROOT=${{github.workspace}}/Tools/QtInstallerFramework/4.4
        -DSERVER=OFF

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - uses: actions/upload-artifact@v3
      with:
        name: viage
        path: ${{github.workspace}}/build/client/viage_client-*-win64.exe

    #- name: Test
      # working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
